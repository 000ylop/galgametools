（a）按钮说明

<上一帧>     显示多帧图片的上一帧
<下一帧>     显示多帧图片的下一帧
<RGB通道>    显示当前图片的颜色通道
<Alpha通道>  显示当前图片的Alpha通道
<3D观察>     进入第一视角3D浏览模式，ESC键或其他操作退出
<导出文件>   导出单独文件（不包括3D模型的转换）
<全部导出>   一次性导出所有文件（不包括3D模型的转换）
<导出模型>   转换当前模型到GV自定义模型格式
<插件列表>   显示当前所有插件的信息
<下拉列表>   指定自定义格式图片转换保存的文件格式，本体支持BMP/JPG/PNG/DDS，其他可由脚本扩展

<播放>  开始播放音频或多帧图片，也可以实现连续渲染模型以达到动画效果
<停止>  停止播放功能
<暂停>  暂停/继续播放功能

[忽略音频文件识别与播放功能]      用于避免读取一些类似音频文件时（主要是MP3）导致FMOD崩溃的情况
[蓝红通道互换]                    图片解析时交换蓝红通道（为了兼容一些图片格式）
[图片垂直颠倒]                    图片解析时垂直颠倒（为了兼容一些图片格式）
[标准图片格式也通过插件转换输出]  表示BMP/JPG/TGA/PNG/PCX/MNG格式的图片也做转换后输出（包括通过上面两个选项的变换）

（b）菜单说明

操作 -> 脚本列表  打开列表，选取导入脚本
     -> 打开脚本  打开单个xml导入脚本文件
     -> 导出列表  保存当前文件列表到文件
     -> 替换文件  替换包内文件，解包插件需支持导入功能
     -> 关闭文件  关闭当前打开的所有文件
     -> 退出

渲染 -> 纹理/线框显示模式
     -> 隐藏/显示隐含部件
     -> 显示/隐藏模型信息
     -> 截取图片           保存当前视口到BMP图片
     -> 参数设置           打开渲染参数设置窗口

滤镜 -> 当前gfx.dll支持的滤镜列表

窗口 -> 模型部件列表窗口
     -> 多帧图片控制窗口

关于 -> 关于窗口

（c）渲染参数说明

2D渲染 -> 播放间隔        多帧图片或3D模型重渲染时间间隔，默认100ms
       -> 循环播放        多帧图片到尾后再从头开始
       -> 播放一遍        多帧图片到尾后停止播放
       -> 开启AlphaBlend  显示图片时使用AlphaBlend
       -> 背景色          AlphaBlend计算时的背景色，默认为视口颜色

3D渲染 -> 默认方式      使用内置的固定管线渲染
       -> 使用以下脚本  使用GV3D脚本渲染
       -> AlphaTest值   0时关闭AlphaTest，默认为10

文件渲染 -> 禁用文件型插件    所有文件都不转换，纯解包
         -> 既浏览又转换文本  浏览文本且导出时生成TXT文件，相当于文本抽出
         -> 只浏览不转换文本  可以浏览但导出时只导出原始文件

（d）GameViewer.ini配置选项

此文件配置背景颜色、游戏分类和注册自定义图片保存选项，标签说明见下：

<关闭音频功能 />

<背景颜色 颜色="16进制数（ARGB）" />

<分类 名称="分类下拉列表显示名" 文件名="导入脚本列表文件名（lst）" />

<图片 名称="下拉列表显示名" 扩展名="保存时添加的扩展名" 脚本名="转换脚本文件名（pndr）" />

导入脚本列表文件放置在GV根目录下，转换脚本文件放置在image目录下，背景颜色缺省00FF00FF（紫色）

（e）插件类型

目前有四种插件，解包插件（用于读取游戏包文件内容）、图片插件（用于转换和显示一些游戏自定义格式的图片）、
音频插件（用于转换和播放一些游戏自定义格式的音频）和模型插件（用于转换和渲染一些游戏自定义格式的3D模型）

GameViewer主程序本身就支持以下四种图片格式（BMP/JPG/TGA/PNG/PCX/MNG），所以遇到这类文件无需插件，导出时可以直接保存不做转换，
也可以变换格式输出。音频则本身就支持WAV/MP2/MP3/OGG/MID等常见格式（详见FMOD），音频插件就是转换自定义格式到标准格式的工具

（f）导入脚本

只要有相应的插件，就可通过自行配置来提取游戏资源。相应的lst文件里保存的是游戏导入脚本列表，加在里面标签会出现在程序的
导入列表里。标签的格式如下：

<分类 名称="分类名">  具体游戏标签必须在分类里

<游戏 名称="游戏名" 文件="脚本文件名" 编码="编码号" />

  "脚本文件名"  指的是放在script目录里的游戏导入脚本文件名（xml）
  "编码号"      指定游戏文件名的编码格式，比如932是JIS日文，-2表示是unicode，跟实际游戏有关。这项也可以省略，
                缺省为0，表示用本地编码

游戏导入脚本标签说明如下：根标签必须是<游戏脚本>，文件编码必须是GB2312

<手动指定文件插件 />  放置这个标签表示关闭GV的文件自动识别功能，用于手工指定一些无tag的文件的插件，避免出错

<提示 提示串="提示信息" />  打开时显示提示信息

<插件 文件名="插件文件名" 接口名="接口前缀" />  指定游戏使用的插件，插件位于plugin目录下，接口前缀只用于引擎插件，用来指定内部子插件

<文件 文件名="游戏文件名" 插件="插件编号" 数据文件="数据文件名" 起始="16进制数（偏移）" 结束="16进制数（偏移）" 编码="编码号" />

  "游戏文件名"   指定导入的游戏文件，相对于游戏目录，例如PM4 sound目录下的se文件，只需在游戏文件名处写sound\se即可，
                 支持通配符
  "插件编号"     指的是使用前面载入的第几号插件来解析，从0开始编号。文件插件可省略，GV有自动识别功能
  "数据文件"     有特殊用途，有些插件会使用辅助的外部文件来解析游戏内容，数据文件放置在data目录下
  "起始" "结束"  只用于解包插件，目的就是把这两个偏移之间的内容作为一个文件来处理（效果同MemPAK.gvl插件，
                 但这个是在磁盘上操作的，可以用于很大的内嵌包文件）。如果省略表示定义整个文件
                 注：只有GV3.3以后的解包插件才有这个功能
  "编码号"       指定这个包文件内文件使用的编码类型，可省略，缺省使用游戏标签里指定的编码号
