
; -----------------------------------------------------------------------------
;	ERISA 画像コンバーター用 PSD->スキン変換スクリプトライブラリ
; -----------------------------------------------------------------------------


;	スキンデータ構造体
; -----------------------------------------------------------------------------

Structure	SkinData
	Hash		aImages			; 画像リソース（Key=ID, ResourceInfo 配列）
	Hash		aStyles			; ボタンスタイル（ButtonStyle 配列）
	Array		aPages			; ページフォーム（PageForm 配列）

	Integer		nError			; エラー発生数

	Reference	rContext		; 入力画像コンテキスト : ImageContext
	Integer		nCutAlign		; 切り出しグリッド幅
	Integer		nCutMargin		; 切り出しマージン幅
	Integer		nCutThreshold	; 切り出し透明度閾値
EndStruct


;	画像リソース情報構造体
; -----------------------------------------------------------------------------

Structure	ResourceInfo
	String	sFileName		; リソースファイル名
	Point	ptOffset		; 表示基準座標
	Size	sizeImage		; 画像サイズ
EndStruct


;	静テキストスタイル構造体
; -----------------------------------------------------------------------------

Structure	TextStyle
	String	sID				; テキストスタイル識別子
	String	sAlign			; テキストアライン
	Integer	nLineHeight		; 行間
	Integer	nFontSize		; フォントサイズ
	String	sFontFace		; フォント名
	Integer	fBold			; 太字
	Integer	fItalic			; 斜体
	Integer	rgbColor		; テキストカラー
	Integer	nTransparency	; 透明度
	Point	ptShadow		; 影オフセット
	Integer	rgbShadow		; 影色
	Integer	nShadowTrans	; 影透明度
EndStruct

Constant	txtAlignLeft		:= 0,
			txtAlignTop			:= 1,
			txtAlignRight		:= 2,
			txtAlignCenter		:= 3,
			txtAlignAccordance	:= 4


;	ボタンスタイル構造体
; -----------------------------------------------------------------------------

Structure	ButtonStyle
	String	sID				; ボタンスタイル識別子
	String	sType			; ボタンタイプ { "button" | "check" | "radio" }
	Point	ptOffset		; 表示基準座標
	Size	sizeButton		; ボタンのサイズ
	Integer	fHitRect		; 矩形による当たり判定を行うか？
	Hash	aImages			; 状態ごとの画像識別子
EndStruct

Data	ButtonStatusTable
	:= "normal", := "mask", := "focus", := "pushed"
	:= "pushed_focus", := "active_pushed"
	:= "disabled", := "push_disabled"
EndData

Constant	btButton			:= 0,
			btCheck				:= 1,
			btRadio				:= 2
Constant	btnHideNormal		:= 01H,
			btnHitRect			:= 02H,
			btnHitMask			:= 04H,
			btnVisFocus			:= 08H,
			btnVisPushed		:= 10H,
			btnVisPushedFocus	:= 20H,
			btnHiddenRect		:= \
				(btnHideNormal or btnHitRect or \
					btnVisFocus or btnVisPushed or btnVisPushedFocus),
			btnHiddenMask		:= \
				(btnHideNormal or btnHitMask or \
					btnVisFocus or btnVisPushed or btnVisPushedFocus)


;	ページフォーム構造体
; -----------------------------------------------------------------------------

Structure	PageForm
	String	sID				; ページ識別子
	Size	sizePage		; ページサイズ
	String	sBG				; 背景画像
	Array	aItems			; アイテム（PageItem 配列）
EndStruct


;	ページアイテム構造体
; -----------------------------------------------------------------------------

Structure	PageItem
	String	sID				; アイテム識別子
	Point	ptItem			; アイテム座標
	Size	sizeItem		; アイテムサイズ
EndStruct


;	画像アイテム構造体
; -----------------------------------------------------------------------------

Structure	ImageItem	: PageItem
	String	sRsrcID			; リソース識別子
	Integer	fHitTransparency
EndStruct


;	静テキストアイテム構造体
; -----------------------------------------------------------------------------

Structure	TextItem	: PageItem
	String	sStyleID
	String	sText
EndStruct


;	ボタンアイテム構造体
; -----------------------------------------------------------------------------

Structure	ButtonItem	: PageItem
	String	sStyleID
	Integer	nFlags
EndStruct

Constant	itemNoTabStop	:= 01H,
			itemNoGroup		:= 02H


;	オブジェクトアイテム構造体
; -----------------------------------------------------------------------------

Structure	ObjectItem	: PageItem
	String	sStyleID
EndStruct



; -----------------------------------------------------------------------------
;	切り出しパラメータを設定する
; -----------------------------------------------------------------------------

Function	SkinData::SetCutParam(
				Integer nAlign, Integer nMargin, Integer nThreshold )

	this.nCutAlign := nAlign
	this.nCutMargin := nMargin
	this.nCutThreshold := nThreshold

EndFunc



; -----------------------------------------------------------------------------
;	現在の画像コンテキストを設定する
; -----------------------------------------------------------------------------

Function	SkinData::SetContext( Reference imgctx )

	this.rContext.SetReference( imgctx )

EndFunc



; -----------------------------------------------------------------------------
;	ページ新規作成
; -----------------------------------------------------------------------------

Function	SkinData::BeginPage(
		String sPageID, Reference imgctx,
		String sBGID, String sBGFile, Integer iLayer )

	this.rContext.SetReference( imgctx )
	;
	Integer	i := this.aPages.GetLength()
	this.aPages[i] := PageForm
	this.aPages[i].sID := sPageID
	this.aPages[i].sizePage := imgctx.size
	;
	print( "\nBegin Page ID = ", sPageID, "\n" )

	If	(sBGID != "") and (sBGFile != "")
		If	SaveImage( sBGID, sBGFile, iLayer ) == 0
			this.aPages[i].sBG := sBGID
		EndIf
	EndIf

EndFunc



; -----------------------------------------------------------------------------
;	画像リソース登録
; -----------------------------------------------------------------------------

Function	SkinData::SaveImage(
		String sImageID, String sImageFile, Reference rLayer )
				; rLayer = { Integer | String }

	If		rLayer.GetType() == "Integer"
		Return	this.SaveAnimation(
					sImageID, sImageFile, rLayer, 1, "", 0 )
	ElseIf	rLayer.GetType() == "String"
		Return	this.SaveAnimation(
					sImageID, sImageFile, 0, -1, rLayer, 0 )
	Else
		print( "Error : レイヤーの識別に \"",
			rLayer.GetType(), "\" 型が指定されています。\n" )
		this.nError += 1
	EndIf

EndFunc


Function	SkinData::SaveAnimation(
		String sImageID, String sImageFile,
		Integer iFirst, Integer nCount, String sName, Integer nAnimeDuration )

	Integer			nResult
	ImageContext	ictxSave
	Point			ptOffset
	ictxSave.merge( this.rContext, iFirst, nCount, sName )
	If	this.nCutAlign
		ictxSave.cut(
			this.nCutAlign, this.nCutMargin,
			this.nCutThreshold, 4, ptOffset )
	EndIf
	If	nAnimeDuration
		ictxSave.duration := nAnimeDuration
	EndIf
	ictxSave.animation()
	nResult := ictxSave.save( sImageFile )

	If	nResult
		print( 'Error : "', sImageFile, '" への書き出しに失敗しました。\n' )
		this.nError += 1
	Else
		print( "  Image ID = ", sImageID, " -> ", sImageFile, "\n" )
		If	this.aImages[sImageID].GetType() != ""
			print( 'Error : 画像識別子 "',
					sImageID, '" は既に定義されています。\n' )
			this.nError += 1
		Else
			this.aImages[sImageID] := ResourceInfo
		EndIf
		this.aImages[sImageID].sFileName := sImageFile
		this.aImages[sImageID].ptOffset := ptOffset
		this.aImages[sImageID].sizeImage := ictxSave.size
	EndIf

	Return	nResult

EndFunc


Function	SkinData::RegImage(
		String sImageID, String sImageFile,
		Reference rPosition, Reference rSize )

	print( "  Image ID = ", sImageID, " -> ", sImageFile, "\n" )
	If	this.aImages[sImageID].GetType() != ""
		print( 'Error : 画像識別子 "',
				sImageID, '" は既に定義されています。\n' )
		this.nError += 1
	Else
		this.aImages[sImageID] := ResourceInfo
	EndIf
	this.aImages[sImageID].sFileName := sImageFile
	If	rPosition.GetType() == "Point"
		this.aImages[sImageID].ptOffset := rPosition
	EndIf
	If	rSize.GetType() == "Size"
		this.aImages[sImageID].sizeImage := rSize
	EndIf

EndFunc


; -----------------------------------------------------------------------------
;	静テキストスタイル登録
; -----------------------------------------------------------------------------

Function	SkinData::AddTextStyle(
		String sStyleID, Integer nAlign,
		String sFontFace, Integer nSize, Integer nLineHeight,
		Integer fBold, Integer fItalic,
		Integer rgbColor, Integer nTransparency,
		Reference rShadowOffset, Integer rgbShadow, Integer nShadowTrans )

	If	this.aStyles[sStyleID].GetType() != ""
		print( "Error : スタイル ", sStyleID, " はすでに定義されています。\n" )
		this.nError += 1
		Return
	EndIf
	Reference	rStyle := this.aStyles[sStyleID] := TextStyle

	Array	aAligns := { "left", "top", "right", "center", "accordance" }
	rStyle.sID := sStyleID
	rStyle.sAlign := aAligns[nAlign]
	rStyle.nLineHeight := nLineHeight
	rStyle.nFontSize := nSize
	rStyle.sFontFace := sFontFace
	rStyle.fBold := fBold
	rStyle.fItalic := fItalic
	rStyle.rgbColor := rgbColor
	rStyle.nTransparency := nTransparency
	If	rShadowOffset.GetType() == "Point"
		rStyle.ptShadow := rShadowOffset
		rStyle.rgbShadow := rgbShadow
		rStyle.nShadowTrans := nShadowTrans
	Else
		rStyle.nShadowTrans := 100H
	EndIf

EndFunc


; -----------------------------------------------------------------------------
;	ボタンスタイル登録
; -----------------------------------------------------------------------------

Function	SkinData::AddButtonStyle(
		String sStyleID, String sImageID, Integer nType, Integer nFlags,
		Reference rLayer, Integer iHitMask,
		Integer iFocus, Integer iPushed, Integer iPushedFocus, 
		Integer iActivePushed, Integer iDisabled, Integer iDisablePushed )

	;
	; 該当レイヤー取得
	;
	Integer	iLayer
	If		rLayer.GetType() == "Integer"
		iLayer := rLayer
	ElseIf	rLayer.GetType() == "String"
		iLayer := -1
		For	r | this.rContext[i]
			If	r.name.IsMatchUsage( rLayer ) == ""
				iLayer := i
				Break
			EndIf
		Next
		If	iLayer < 0
			print( "Error : ", String(rLayer),
					"に該当するレイヤーが見つかりません。\n" )
			this.nError += 1
			Return
		EndIf
	Else
		print( "Error : レイヤーの指定が不正です。\n" )
		this.nError += 1
		Return
	EndIf
	;
	; 画像識別子取得
	;
	If	sImageID == ""
		sImageID := sStyleID
		Integer	i := 1
		While	this.aImages[sImageID].GetType() != ""
			sImageID := sStyleID + "_" + String(i)
			i += 1
		EndWhile
	EndIf
	;
	; スタイル登録
	;
	Array	aButtonType := { "button", "check", "radio" }
	If	this.aStyles[sStyleID].GetType() != ""
		print( 'Error : スタイル "',
				sStyleID, '" は既に定義されています。\n' )
		this.nError += 1
	Else
		this.aStyles[sStyleID] := ButtonStyle
	EndIf
	Reference	rStyle := this.aStyles[sStyleID]
	rStyle.sID := sStyleID
	rStyle.sType := aButtonType[nType]
	rStyle.fHitRect := (nFlags and btnHitRect) != 0
	If	rStyle.fHitRect
		rStyle.aImages.mask := ""
	EndIf
	;
	; 整列画像生成
	;
	ImageContext	imgctx
	Array			aClipIdx
	imgctx.merge( this.rContext, iLayer, 1 )
	If	(nFlags and btnHideNormal) == 0
		aClipIdx[0] := 0
	EndIf
	If	nFlags and btnHitMask
		aClipIdx[1] := 0
		imgctx.merge( this.rContext, iLayer + iHitMask, 1 )
	EndIf
	If	iFocus
		aClipIdx[2] := imgctx.GetLength()
		imgctx.merge( this.rContext, iLayer + iFocus, 1 )
	ElseIf	nFlags and btnVisFocus
		aClipIdx[2] := 0
	EndIf
	If	iPushed
		aClipIdx[3] := imgctx.GetLength()
		imgctx.merge( this.rContext, iLayer + iPushed, 1 )
	ElseIf	nFlags and btnVisPushed
		aClipIdx[3] := 0
	EndIf
	If	iPushedFocus
		aClipIdx[4] := imgctx.GetLength()
		imgctx.merge( this.rContext, iLayer + iPushedFocus, 1 )
	ElseIf	nFlags and btnVisPushedFocus
		aClipIdx[4] := 0
	EndIf
	If	iActivePushed
		aClipIdx[5] := imgctx.GetLength()
		imgctx.merge( this.rContext, iLayer + iActivePushed, 1 )
	EndIf
	If	iDisabled
		aClipIdx[6] := imgctx.GetLength()
		imgctx.merge( this.rContext, iLayer + iDisabled, 1 )
	EndIf
	If	iDisablePushed
		aClipIdx[7] := imgctx.GetLength()
		imgctx.merge( this.rContext, iLayer + iDisablePushed, 1 )
	EndIf
	;
	If	this.nCutAlign
		imgctx.cut(
			this.nCutAlign, this.nCutMargin,
			this.nCutThreshold, 4, rStyle.ptOffset )
	Else
		imgctx.cut( 1, this.nCutMargin,
			this.nCutThreshold, 4, rStyle.ptOffset )
	EndIf
	Size	sizeParts := imgctx.size
	rStyle.sizeButton := sizeParts
	;
	; 画像の保存・登録
	;
	imgctx.arrange( true )
	If	imgctx.save( sImageID + ".eri" )
		print( "Error : ", sImageID, " の書き出しに失敗しました。\n" )
		this.nError += 1
		Return
	EndIf
	;
	If	this.aImages[sImageID].GetType() != ""
		print( "Error : 画像識別子 ", sImageID, " は既に定義されています。\n" )
		this.nError += 1
	Else
		this.aImages[sImageID] := ResourceInfo
	EndIf
	this.aImages[sImageID].sFileName := sImageID + ".eri"
	;
	; ボタンステータス画像設定
	;
	For	rStatus | ButtonStatusTable[i]
		If	aClipIdx[i].GetType() != ""
			Integer	j := aClipIdx[i]
			String	sImage := sImageID +
						":RECT(0," + String(j*sizeParts.h) + "," +
						String(sizeParts.w) + "," + String(sizeParts.h) + ")"
			rStyle.aImages[rStatus] := sImage
		EndIf
	Next
	;
	print( "  Button Style ID = ", sStyleID, " : ", sImageID, "\n" )

EndFunc


Function	SkinData::RegButtonStyle( 
		String sStyleID, String sImageID,
		Reference imgctx, Integer nType, Integer nFlags,
		Integer iHitMask, Integer iFocus,
		Integer iPushed, Integer iPushedFocus, 
		Integer iActivePushed, Integer iDisabled, Integer iDisablePushed )

	;
	; 画像識別子取得
	;
	If	sImageID == ""
		sImageID := sStyleID
		Integer	i := 1
		While	this.aImages[sImageID].GetType() != ""
			sImageID := sStyleID + "_" + String(i)
			i += 1
		EndWhile
	EndIf
	;
	; スタイル登録
	;
	Array	aButtonType := { "button", "check", "radio" }
	If	this.aStyles[sStyleID].GetType() != ""
		print( 'Error : スタイル "',
				sStyleID, '" は既に定義されています。\n' )
		this.nError += 1
	Else
		this.aStyles[sStyleID] := ButtonStyle
	EndIf
	Reference	rStyle := this.aStyles[sStyleID]
	rStyle.sID := sStyleID
	rStyle.sType := aButtonType[nType]
	rStyle.fHitRect := (nFlags and btnHitRect) != 0
	If	rStyle.fHitRect
		rStyle.aImages.mask := ""
	EndIf
	;
	If	this.nCutAlign
		imgctx.cut(
			this.nCutAlign, this.nCutMargin,
			this.nCutThreshold, 4, rStyle.ptOffset )
	Else
		imgctx.cut( 1, this.nCutMargin,
			this.nCutThreshold, 4, rStyle.ptOffset )
	EndIf
	Size	sizeParts := imgctx.size
	rStyle.sizeButton := sizeParts
	;
	; 整列画像生成
	;
	Array			aClipIdx
	If	(nFlags and btnHideNormal) == 0
		aClipIdx[0] := 0
	EndIf
	If	nFlags and btnHitMask
		aClipIdx[1] := iHitMask
	EndIf
	If	iFocus
		aClipIdx[2] := iFocus
	ElseIf	nFlags and btnVisFocus
		aClipIdx[2] := 0
	EndIf
	If	iPushed
		aClipIdx[3] := iPushed
	ElseIf	nFlags and btnVisPushed
		aClipIdx[3] := 0
	EndIf
	If	iPushedFocus
		aClipIdx[4] := iPushedFocus
	ElseIf	nFlags and btnVisPushedFocus
		aClipIdx[4] := 0
	EndIf
	If	iActivePushed
		aClipIdx[5] := iActivePushed
	EndIf
	If	iDisabled
		aClipIdx[6] := iDisabled
	EndIf
	If	iDisablePushed
		aClipIdx[7] := iDisablePushed
	EndIf
	;
	; 画像の保存・登録
	;
	imgctx.arrange( true )
	If	imgctx.save( sImageID + ".eri" )
		print( "Error : ", sImageID, " の書き出しに失敗しました。\n" )
		this.nError += 1
		Return
	EndIf
	;
	If	this.aImages[sImageID].GetType() != ""
		print( "Error : 画像識別子 ", sImageID, " は既に定義されています。\n" )
		this.nError += 1
	Else
		this.aImages[sImageID] := ResourceInfo
	EndIf
	this.aImages[sImageID].sFileName := sImageID + ".eri"
	;
	; ボタンステータス画像設定
	;
	For	rStatus | ButtonStatusTable[i]
		If	aClipIdx[i].GetType() != ""
			Integer	j := aClipIdx[i]
			String	sImage := sImageID +
						":RECT(0," + String(j*sizeParts.h) + "," +
						String(sizeParts.w) + "," + String(sizeParts.h) + ")"
			rStyle.aImages[rStatus] := sImage
		EndIf
	Next
	;
	print( "  Button Style ID = ", sStyleID, " : ", sImageID, "\n" )

EndFunc


; -----------------------------------------------------------------------------
;	静テキストアイテム追加
; -----------------------------------------------------------------------------

Function	SkinData::AddTextItem(
		String sItemID, String sStyleID,
		Integer x, Integer y, Integer w, Integer h, String sText )

	Integer		iPage := this.aPages.GetLength() - 1
	If	iPage < 0
		print( "Error : ページ宣言無しにアイテム ",
					 sItemID, " を追加しようとしました。\n" )
		this.nError += 1
		Return
	EndIf
	Reference	rPage := this.aPages[iPage]

	If	this.aStyles[sStyleID].GetType() != "TextStyle"
		print( "Error : スタイル ", sStyleID, " は定義されていません。\n" )
		this.nError += 1
		Return
	EndIf

	rPage.aItems.Insert( 0, TextItem )
	rPage.aItems[0].sID := sItemID
	rPage.aItems[0].sStyleID := sStyleID
	rPage.aItems[0].ptItem.x := x
	rPage.aItems[0].ptItem.y := y
	rPage.aItems[0].sizeItem.w := w
	rPage.aItems[0].sizeItem.h := h
	rPage.aItems[0].sText := sText

EndFunc


; -----------------------------------------------------------------------------
;	画像アイテム追加
; -----------------------------------------------------------------------------

Function	SkinData::AddImageItem(
		String sItemID, String sImageID,
		Integer fHitTransparency, Reference rPosition )
				; rPosition : Point ; 省略可能

	Integer		iPage := this.aPages.GetLength() - 1
	If	iPage < 0
		print( "Error : ページ宣言無しにアイテム ",
					 sItemID, " を追加しようとしました。\n" )
		this.nError += 1
		Return
	EndIf
	Reference	rPage := this.aPages[iPage]

	Point	ptPosition
	Size	sizeImage
	If	rPosition.GetType() == "Point"
		ptPosition := rPosition
	ElseIf	this.aImages[sImageID].GetType() != ""
		ptPosition := this.aImages[sImageID].ptOffset
	EndIf
	If	this.aImages[sImageID].GetType() != ""
		sizeImage := this.aImages[sImageID].sizeImage
	EndIf

	rPage.aItems.Insert( 0, ImageItem )
	rPage.aItems[0].sID := sItemID
	rPage.aItems[0].ptItem := ptPosition
	rPage.aItems[0].sizeItem := sizeImage
	rPage.aItems[0].sRsrcID := sImageID
	rPage.aItems[0].fHitTransparency := fHitTransparency

	print( "  Image Item = ", sItemID, " : ", sImageID, "\n" )

EndFunc


; -----------------------------------------------------------------------------
;	ボタンアイテム追加
; -----------------------------------------------------------------------------

Function	SkinData::AddButtonItem(
		String sItemID, String sStyleID, Integer nFlags, Reference rPosition )

	Integer		iPage := this.aPages.GetLength() - 1
	If	iPage < 0
		print( "Error : ページ宣言無しにアイテム ",
					 sItemID, " を追加しようとしました。\n" )
		this.nError += 1
		Return
	EndIf
	Reference	rPage := this.aPages[iPage]

	If	this.aStyles[sStyleID].GetType() != "ButtonStyle"
		print( "Error : スタイル ", sStyleID, " は定義されていません。\n" )
		this.nError += 1
		Return
	EndIf

	Reference	rStyle := this.aStyles[sStyleID]
	rPage.aItems.Insert( 0, ButtonItem )
	rPage.aItems[0].sID := sItemID
	If	rPosition.GetType() == "Point"
		rPage.aItems[0].ptItem := rPosition
	Else
		rPage.aItems[0].ptItem := rStyle.ptOffset
	EndIf
	rPage.aItems[0].sizeItem := rStyle.sizeButton
	rPage.aItems[0].sStyleID := sStyleID
	rPage.aItems[0].nFlags := nFlags

	print( "  Button Item = ", sItemID, " : ", sStyleID, "\n" )

EndFunc


; -----------------------------------------------------------------------------
;	オブジェクトアイテム追加
; -----------------------------------------------------------------------------

Function	SkinData::AddObjectItem(
		String	sItemID, String sPageID, Integer x, Integer y )

	Integer		iPage := this.aPages.GetLength() - 1
	If	iPage < 0
		print( "Error : ページ宣言無しにアイテム ",
					 sItemID, " を追加しようとしました。\n" )
		this.nError += 1
		Return
	EndIf
	Reference	rPage := this.aPages[iPage]

	rPage.aItems.Insert( 0, ObjectItem )
	rPage.aItems[0].sID := sItemID
	rPage.aItems[0].sStyleID := sPageID
	rPage.aItems[0].ptItem.x := x
	rPage.aItems[0].ptItem.y := y

	For	r | this.aPages[i]
		If	r.sID == sPageID
			rPage.aItems[0].sizeItem := r.sizePage
			Break
		EndIf
	Next

EndFunc


; -----------------------------------------------------------------------------
;	ページのスリム化
; -----------------------------------------------------------------------------

Function	SkinData::SmartPage( Integer nAlign )

	Integer		iPage := this.aPages.GetLength() - 1
	If	iPage < 0
		Return
	EndIf
	Reference	rPage := this.aPages[iPage]

	Rect	rect := IRect( 7FFFFFFFH, 7FFFFFFFH, -8000000H, -8000000H )
	For	rItem | rPage.aItems[i]
		If	rItem.ptItem.x < rect.left
			rect.left := rItem.ptItem.x
		EndIf
		If	rItem.ptItem.y < rect.top
			rect.top := rItem.ptItem.y
		EndIf
		If	rItem.ptItem.x + rItem.sizeItem.w > rect.right
			rect.right := rItem.ptItem.x + rItem.sizeItem.w
		EndIf
		If	rItem.ptItem.y + rItem.sizeItem.h > rect.bottom
			rect.bottom := rItem.ptItem.y + rItem.sizeItem.h
		EndIf
	Next

	If	nAlign > 2
		rect.left -= rect.left mod nAlign
		rect.top -= rect.top mod nAlign
		rect.right += nAlign - (rect.right mod nAlign)
		rect.bottom += nAlign - (rect.bottom mod nAlign)
	EndIf

	rPage.sizePage.w := rect.right - rect.left
	rPage.sizePage.h := rect.bottom - rect.top
	If	rPage.sizePage.w <= 0
		rPage.sizePage.w := 1
	EndIf
	If	rPage.sizePage.h <= 0
		rPage.sizePage.h := 1
	EndIf

	For	rItem | rPage.aItems[i]
		rItem.ptItem.x -= rect.left
		rItem.ptItem.y -= rect.top
	Next

EndFunc



; -----------------------------------------------------------------------------
;	スキンフォーマット出力
; -----------------------------------------------------------------------------

Function	SkinData::FormatSkin()

	output( '<?xml version="1.0" encoding="Shift_JIS"?>\r\n' )
	output( '<skin>\r\n' )

	;
	;	リソース定義タグ出力
	; -------------------------------------------------------------------------
	output( '	<resource>\r\n' )
	For	rInfo | this.aImages[i]
		output( '		<image id="', this.aImages.GetTagName(i),
								'" src="', rInfo.sFileName, '"/>\r\n' )
	Next
	output( '	</resource>\r\n' )

	;
	;	スタイル定義タグ出力
	; -------------------------------------------------------------------------
	output( '	<declare_style>\r\n' )
	For	rStyle | this.aStyles[i]
		rStyle.FormatSkin()
	Next
	output( '	</declare_style>\r\n' )

	;
	;	フォーム出力
	; -------------------------------------------------------------------------
	For	rPage | this.aPages[i]
		If	rPage.sBG != ""
			output( '	<window id="', rPage.sID,
						'" bg="', rPage.sBG, '">\r\n' )
		Else
			output( '	<page id="', rPage.sID,
						'" width="', rPage.sizePage.w,
						'" height="', rPage.sizePage.h, '">\r\n' )
		EndIf
		For	rItem | rPage.aItems[j]
			rItem.FormatSkin()
		Next
		If	rPage.sBG != ""
			output( '	</window>\r\n' )
		Else
			output( '	</page>\r\n' )
		EndIf
	Next

	output( '</skin>\r\n' )

	print( "\nエラー : ", this.nError, "\n\n" )

EndFunc


Function	TextStyle::FormatSkin()

	output( '		<style id="', this.sID, '" type="static_text">\r\n' )
	output( '			<arrange align="', this.sAlign,
			'" line_height="', this.nLineHeight, '" indent="0"/>\r\n' )
	output( '			<font size="',
			this.nFontSize, '" face="', this.sFontFace, '" bold="' )
	If	this.fBold
		output( 'true' )
	Else
		output( 'false' )
	EndIf
	output( '" italic="' )
	If	this.fItalic
		output( 'true' )
	Else
		output( 'false' )
	EndIf
	output( '"/>\r\n' )
	output( '			<text color="00', this.rgbColor.Format(16,6),
				'H" transparency="', this.nTransparency, '"/>\r\n' )
	output( '			<shadow x="', this.ptShadow.x, '" y="',
				this.ptShadow.y, '" color="00', this.rgbShadow.Format(16,6),
				'H" transparency="', this.nShadowTrans, '"/>\r\n' )
	output( '		</style>\r\n' )

EndFunc


Function	ButtonStyle::FormatSkin()

	output( '		<style id="', this.sID, '" type="button">\r\n' )
	output( '			<arrange type="', this.sType, '"/>\r\n' )
	For	rImage | this.aImages[j]
		String	sTag := this.aImages.GetTagName(j)
		output( '			<', sTag, ' image="', rImage, '"' )
		If	sTag == "mask"
			output( ' rect="' )
			If	this.fHitRect
				output( "true" )
			Else
				output( "false" )
			EndIf
			output( '"' )
		EndIf
		output( "/>\r\n" )
	Next
	output( '		</style>\r\n' )

EndFunc


Function	ImageItem::FormatSkin()

	output( '		<image id="', this.sID,
					'" x="', this.ptItem.x, '" y="', this.ptItem.y,
					'" rsrc="', this.sRsrcID )
	If	this.fHitTransparency
		output( '"><basic_flag hit_transparency="ture"/></image>\r\n' )
	Else
		output( '"/>\r\n' )
	EndIf

EndFunc


Function	TextItem::FormatSkin()

	output( '		<static_text id="', this.sID,
					'" x="', this.ptItem.x, '" y="', this.ptItem.y,
					'" width="', this.sizeItem.w,
					'" height="', this.sizeItem.h,
					'" style="', this.sStyleID,
					'" text="', this.sText, '"/>\r\n' )

EndFunc


Function	ButtonItem::FormatSkin()

	output( '		<button id="', this.sID,
					'" x="', this.ptItem.x, '" y="', this.ptItem.y,
					'" width="', this.sizeItem.w,
					'" height="', this.sizeItem.h,
					'" style="', this.sStyleID, '" tab_stop="' )

	If	this.nFlags and itemNoTabStop
		output( "false" )
	Else
		output( "true" )
	EndIf
	output( '" group="' )
	If	this.nFlags and itemNoGroup
		output( "false" )
	Else
		output( "true" )
	EndIf
	output( '"/>\r\n' )

EndFunc


Function	ObjectItem::FormatSkin()

	output( '		<object id="', this.sID,
					'" x="', this.ptItem.x, '" y="', this.ptItem.y,
					'" style="', this.sStyleID, '"/>\r\n' )

EndFunc


