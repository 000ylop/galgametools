
■ 変換処理ファイル書式
　オプション /l を指定することによって変換処理ファイルから処理の手続きを指定することが出来る。
　このファイルは XML 形式のテキストファイルで、処理は左記に書かれたタグから順番に行われる。


◇ <erisa>

パラメータ；

　全てのタグは <erisa> タグ内に記述する。


◇ <erisa><cotopha><!-- ...

　<cotopha> タグ内に、コメントとして詞葉スクリプトを記述することが出来る。
　但し、コメントが開始する行と、コメントが終了する行に何かが記述されていても無視される。

（例）
	<cotopha>
	<!--- この行と
		integer a
		; ...
	この行に書かれた内容は無視される -->
	</cotopha>


◇ <erisa><env>

パラメータ；
mime		: 出力ファイルのフォーマットを指定する。
		　ERI 形式の場合には、image/x-eri (デフォルト),
		　ERINA 形式の場合には、image/x-erina,
		　ERISA 形式の場合には、image/x-erisa を指定する。
		　GDI+ がインストールされていれば、image/png なども指定できる。
dstdir		: デフォルトの出力先ディレクトリ
srcdir		: デフォルトの入力元ディレクトリ
put_align	: 画像を配置する際のグリッド幅（デフォルトは 1 ）
cut_align	: 画像を切り抜く際のグリッド幅（デフォルトは 0 ）
cut_margin	: 画像を切り抜く際のマージン幅（デフォルトは 0 ）
cut_threshold	: 画像を切り抜く際の透明判定閾値（デフォルトは 0）
keep_hotspot	: 画像を切り出した際にホットスポットを維持するかを指定する。
		　0 の時、ホットスポットは (0,0) に初期化される。
		　1 の時、ホットスポットは切り出し座標に応じて修正される
		　デフォルトは 1 である。
layer_blend	: レイヤーを結合するかどうかを指定する。
		　0 の時、レイヤーは結合されない。
		　1 の時、レイヤーは結合される。
		　デフォルトは 0 である。
		　この設定は <file>, <image> タグに働く。

　<env> タグでは、環境設定を行う。ここで設定した値は、次に <env> タグが現れるまでの間、デフォルトの値として使用される。
　入力力ディレクトリの基底は、変換処理ファイルと同じディレクトリである。
　特に指定しない場合には、変換処理ファイルと同じディレクトリが適用される。


◇ <erisa><file>

パラメータ；
src	: 入力ファイル名
dst	: 出力ファイル名
hotspot	: ホットスポットを "x,y" 形式で指定する
script	: スクリプト関数名

　出力するファイルのパッケージを生成する。
　src にファイル名を指定した場合には、単純にファイル変換を行う。この場合、dst は省略することも出来る。また、出力ファイル名の末尾が \ 記号の場合には、出力先ディレクトリの指定となる。".\" を指定すれば、デフォルトの出力先ディレクトリへ出力する。
　より複雑な処理を記述したい場合には、<file> タグ内にその手続きを記述する。（タグ内の手続きは、入力ファイルが複数ある場合には、繰り返し行われる）
　入力ファイル名にはワイルドカードを指定することが出来る。この時、出力ファイル名は自動的に決定される。
　また、次の書式で連番ファイルを指定することも出来る。

	filename%%%.ext:xx-yy[,zz]

　この書式では、%%% の部分は任意の場所に記述でき xx-yy で指定された範囲の数値が順次適用される。
　zz には数値のステップで、コンマ以降は省略できる。各桁数は任意である。
　例えば、

	sample%%%.eri:0-100,2

は、sample000.eri, sample002.eri, ... sample100.eri の列を指定する。
　次の書式で入出力ファイル名を指定した場合、funcname に対応する詞葉スクリプトの関数が呼び出される。

	$funcname

　入力ファイル名の場合には、関数には 0 から始まる番号（Integer）が渡される。この関数が空でない文字列を返している間、番号が 1 づつ増やされて処理は継続される。関数が空の文字列を返すとループは終了する。
　出力ファイル名の場合には、関数には 0 から始まる番号（Integer）と、入力ファイル名（String）が渡される。（入力ファイル名には、ディレクトリは含まれない）
　また、ホットスポットも同様にして詞葉スクリプトを呼び出すことが出来る。
　この時、スクリプトの関数には、ImageContext オブジェクトへの参照、0 から始まる番号（Integer）が渡される。ホットスポットを変更したい場合には、渡された ImageContext.hotspot に変更を加える。
　script には呼び出すスクリプト関数名を指定できる。関数には ImageContext オブジェクトへの参照が渡される。


◇ <erisa><file><cut>

パラメータ；
align		: 画像を切り抜く際のグリッド幅
		　0 を指定すると画像を切り抜かずに、最大サイズに合わせられる
margin		: 画像を切り抜く際のマージン幅
threshold	: 画像を切り抜く際の透明判定閾値
keep_hotspot	: 画像を切り出した際にホットスポットを維持するかを指定する
op_alpha	: 画像を切り出した後に、αチャネルを除去するかどうかを指定する
			"remove" : αチャネルを除去する
			"auto"	 : αチャネルが全て不透明の場合に除去
			"keep"	 : αチャネルは保持する
		　デフォルトは "auto" である

　画像コンテキストにある画像を同一サイズに切り抜く。
　切り抜く場合、それぞれの画像の有効範囲の和の最小外接矩形が用いられる。
　cut_align に 1 以上の値を指定した場合には、画像の透明部分を自動的に判定して有効範囲を決定する。
　各パラメータのデフォルト値は <env> タグで指定する。

※ <cut> タグは各レイヤーのサイズを整えるためも用いられる。


◇ <erisa><file><arrange>

パラメータ；
way	: 画像を配列する方向を指定する
		"horz" : 水平方向
		"vert" : 垂直方向
put	: 画像を配列する位置を指定する
		"under" : 現在の画像の下側
		"right" : 現在の画像の左側
	　省略すると、way から自動的に決定される
align	: 画像を配置する際のグリッド幅

　画像コンテキストを、現在の画像に追加する形で配列する。
　現在の画像コンテキストは破棄される

※この処理を実行すると、ホットスポットは初期化される。


◇ <erisa><file><animation>

パラメータ；
duration	: 全アニメーション時間 [ms]
seq		: シーケンステーブル

　画像コンテキストから、アニメーションを生成する。
　seq にはシーケンステーブルを指定することが出来る。書式は以下の通りである。

sequence-list:
	<frame-number>
		{ [* <duration-frames>] | [- <frame-number>] }
		[, <sequence-list>]

　例えば、"0-3" は4フレームからなるアニメーションのデフォルトのシーケンステーブルであり、"0*10, 1, 2, 3*10, 2, 1" はループするアニメーションの典型的なシーケンステーブルである。


◇ <erisa><file><write>

パラメータ；
dst	: 出力ファイル名

　画像コンテキストを、連番ファイルとして出力する。
　dst には次の書式を指定することが出来る。

	filename%%%.ext:xx,zz

　%%% の部分には、xx から始まる数値が順次適用される。
　zz には数値のステップで、コンマ以降は省略できる。また、各桁数は任意である。
　また、filename の部分には、* 記号、又は ? 記号を用いることが出来る。* 記号は入力ファイル名のファイルタイトル（拡張子を含まないファイル名）、? 記号は入力ファイル名の先頭から1文字（例えば ??? は先頭から3文字）を取り出して置き換えられる。
　先頭に $ 記号を指定すると、詞葉スクリプトを呼び出してファイル名を決定することが出来る。

	dst="$seqfile"

とすると、<cotopha> タグ内に記述した seqfile 関数が呼び出される。関数には ImageContext への参照と、画像コンテキスト中の指標（Integer）が渡され、関数の返り値が出力画像のファイル名として使用される。


◇ <erisa><file><image>

パラメータ；
src	: 画像ファイル
alpha	: αチャネル画像
hotspot	: ホットスポットを "x,y" 形式で指定する

　指定した画像ファイルを読み込み、画像コンテキストに追加する。
　ワイルドカードを指定することが出来る。
　また、次の書式で連番ファイルを指定することも出来る。

	filename%%%[.ext]:xx-yy,zz

　あるいは、先頭に $ 記号を付加してことはスクリプトの関数を呼び出すことが出来る。

	$funcname

　これらの指定は <file> タグでの指定と同様である。
　src 属性ではなく、<image> タグの内側に、セミコロン（;）で区切って、ファイル列を指定することも出来る。

	<image> sample1.eri; sample2.eri; sample3.eri; </image>

　この時、余分な空白は無視される。
　また、アニメーション画像を読み込んだ場合、各フレームの画像が順番に展開されて、画像コンテキストに追加される。
　連番指定で複数の画像ファイルを指定する場合、alpha 属性を指定する場合には、各々のファイルの順番が正しく対応するようにしなければならない。
　alpha の属性の先頭に $ 記号を記述すると、詞葉スクリプトを呼び出して対応するαチャネル画像のファイル名を決定することが出来る。

	alpha="$alphafile"

とすると、<cotopha> タグ内に記述した alphafile 関数が呼び出される。この関数には 0 から始まる番号（Integer）と、画像ファイル名（String）が渡され、関数の返り値がαチャネル画像のファイル名として使用される。


◇ <erisa><file><remove>

　現在の画像コンテキストを削除する。
　特定のフレーム、又はレイヤーのみを削除したい場合には <select> タグと組み合わせる。

	<select frame="1-3"><remove/></select>

　この記述は、1〜3 フレームを削除する。


◇ <erisa><file><select>

パラメータ；
layer	: レイヤーの選択
frame	: フレーム・レイヤーの範囲
dst	: 出力ファイル名
script	: スクリプト関数名

　<select> タグは、<file> タグ、又は <select> タグの中に記述でき、親タグの画像コンテキストから指定した画像を選択して、<select> タグの画像コンテキストに複製する。
　<file> タグの中に記述できる他のタグを、<select> タグの中に記述することも出来る。
　layer には適合するレイヤー名の書式を指定する。この書式は詞葉スクリプトの String.IsMatchUsage 関数と同様である。
　frame には選択する、フレーム、又はレイヤー番号の範囲を以下の書式で指定することが出来る。

	xx[-yy[,zz]]

　この書式は連番指定の書式と同様である。但し、選択された順番に画像が配列されるので、zz がマイナスになる場合には順番が逆になる。
　dst には出力ファイル名を指定できる。この場合には、<select> タグの中で得られた結果が指定されたファイルへ出力される。（<select> タグの中には、<file> タグと同様のタグを使用することが出来る）
　出力ファイル名の指定の中には * 記号、又は ? 記号を用いることが出来る。* 記号は入力ファイル名のファイルタイトル（拡張子を含まないファイル名）、? 記号は入力ファイル名の先頭から1文字（例えば ??? は先頭から3文字）を取り出して置き換えられる。
　dst タグを指定しなかった場合には、選択された元の画像は削除され、結果が親の画像コンテキストに追加される。
　layer, frame 属性を指定しない場合には空の画像コンテキストが作成される。
　frame は指定しないで、layer に " " （空白 1 文字）を指定すると全てのレイヤー／フレームを選択することが出来る。
　script には呼び出すスクリプト関数名を指定できる。関数には ImageContext オブジェクトへの参照が渡される。



■ 詞葉スクリプト拡張仕様

◇ Image 型
　Image は画像データを保持する。

<Image メンバ変数>

・index : Integer
　元の画像ファイルの中での、フレーム番号、又はレイヤー番号。

・name : String
　レイヤー名。

・filename : String
　画像ファイル名。ディレクトリパスは含まれない。


◇ ImageContext 型
　ImageContext は画像コンテキストを保持する。
　ImageContext 型は Array 型から派生しており、配列の要素に Image オブジェクトを保持する。

<ImageContext メンバ変数>

・duration : Integer
　アニメーションの全時間（ミリ秒単位）。

・size : Size
　画像の全体サイズ。

・hotspot : Point
　ホットスポット。

・filename : String
　画像ファイル名。ディレクトリパスは含まれない。


<ImageContext メンバ関数>

・load( string filename, integer blend_mode := 0 )
　filename に指定された画像ファイルを読み込む。
　ファイルの位置は、デフォルトの入力ディレクトリからの相対位置となる。
　blend_mode には、複数のレイヤーを含んでいる場合に、画像を統合するかどうかを指定する。
　関数が成功すると 0 が返される。

・save( string filename[, string mime_type] )
　filename に指定されたファイルに出力バッファの画像を保存する。（出力バッファに画像を設定するには、arrange, 又は animation 関数を呼び出さなければならない）
　出力バッファにデータが設定されていない場合には、自動的に、cut, animation 関数が呼び出される。
　ファイルの位置は、デフォルトの出力ディレクトリからの相対位置となる。
　mime_type には書き出すフォーマットの MIME タイプを指定できる。省略した場合にはデフォルトの設定が適用される。
　出力ファイルの拡張子が省略された場合には、書き出しフォーマットから自動的に拡張子が付加される。
　関数が成功すると 0 が返される。

・cut( integer align := 0, integer margin := 0,
	integer threshold := 0,
	integer op_flags := 5 [, referece cut_offset] )
　画像コンテキストに含まれる画像を切り出す。
　align, margin, threshold の意味は、<cut> タグと同様である。
　op_flags には以下の値の組み合わせを指定することが出来る。
	1 : ホットスポットを切り出し座標に合わせて修正する
	2 : αチャネルを強制的に除去する
	4 : αチャネルが全て不透明になっている場合にのみ除去する
　cut_offset には Point オブジェクトを指定することが出来、関数が復帰すると、切り出されたオフセット座標が渡される。（切り出されたサイズは size メンバ変数で知ることが出来る）
　関数が成功すると 0 が返される。

※ cut 関数は各レイヤーのサイズを整えるためも用いられる。

・arrange( integer way_vert := 0,
		integer put_right := 0, integer align := 1 )
　画像コンテキストに含まれる画像を、出力用バッファに配列して結合する。
　way_vert, put_right, align の意味は、<arrange> タグと同様である。
　関数が完了すると、配列に設定されてた Image データは破棄され、結合された 1 枚の画像が出力用バッファの複製として追加される。

・animation( string seq_list := "" )
　画像コンテキストに含まれる画像を、アニメーションデータとして出力バッファに結合する。
　この時、全ての画像サイズが一致していなければならない。
　seq_list は <animation> タグの seq 属性と同じ意味である。
　画像サイズが一致していない場合には、cut 関数を呼び出して、サイズを整える必要がある。
　この関数は、1 枚の画像データを出力バッファに設定するためにも用いることも出来る。

※ animation 関数は単に、データを出力バッファに設定するためにも用いられる。

・merge( reference imgctx, integer first := 0,
		integer count := -1, string name := "" )
　imgctx に指定された ImageContext オブジェクトの画像データを複製して追加する。
　first には先頭の指標、count には個数、name には一致させるレイヤー名の書式を指定する。name の書式は String.IsMatchUsage 関数のものと同様である。
　count に -1 が指定されると、imgctx の終端までが複製の対象となる。


◇ グローバル関数

・print( ... )
　標準出力に任意の文字列、数値を出力する。
　引数は任意の数指定できる。
　Integer や Real を出力した場合、自動的に文字列に変換される。
　String、Integer、Real 以外のオブジェクトを出力すると、内容がダンプとして出力される。


・output( ... )
　アウトプットファイルに出力する。
　引数の意味は print と同様である。

