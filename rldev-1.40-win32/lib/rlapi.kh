{-# enc CP932 #-
  rlapi.kh: wrapper functions in Kepago for Kepago/RealLive API functions.
  
  The wrappers have various different purposes.  Some (such as CallDLL) attempt 
  to hide incompatibilities between different interpreter versions.  Some (such 
  as GetCursorPos) rationalise the API by combining multiple opcodes into single 
  logical functions.  Others provide for removing debugging code automatically, 
  for evaluating special cases at compile-time, or for supporting syntactic
  sugar such as array variables.

  This file is loaded automatically.  You should not need to link to it
  yourself.

  The RLdev run-time library is copyright (c) 2006 Peter Jolly.

  This file is part of RLdev, which is licensed under the GNU General Public
  License, version 2.  This file may be considered an integral part of the
  compiler; programs are therefore permitted to include this code, as
  automatically included by the compiler, without thereby being classed as
  derivative works.  This means that programs compiled with RLdev are not ipso
  facto required to be licensed under the GNU GPL, although this does not affect
  any other reason why they might be required to be so licensed, nor are any
  other uses of this code so exempted.
-}

#ifndef __RLAPI_KH__
#define __RLAPI_KH__, __HideFunctionsSilently__


//-- Compatibility with pre-1.30 versions of the API.  Move this to compat.kh when a new API is released.

#inline WindowStyle ([__style]):
  #warn at (__CALLER_FILE__, __CALLER_LINE__, 'the name WindowStyle is deprecated: use TextWindow instead')
  #ifdef __style
    TextWindow (__style)
  #else
    TextWindow
  #endif;

#inline bgmPlaying2 ():
  #warn at (__CALLER_FILE__, __CALLER_LINE__, 'the name bgmPlaying2 is deprecated: use bgmStatus instead')
  return bgmStatus;

#inline bgmFadeOut2 ([__time]):
  #warn at (__CALLER_FILE__, __CALLER_LINE__, 'the name bgmFadeOut2 is deprecated: use bgmFadeOutEx instead')
  #ifdef __time
    bgmFadeOutEx (__time)
  #else
    bgmFadeOutEx
  #endif;

#inline PortraitOpen (__file, [__face]):
  #warn at (__CALLER_FILE__, __CALLER_LINE__, 'the name PortraitOpen is deprecated: use FaceOpen instead')
  #ifdef __face
    FaceOpen (__file, __face)
  #else
    FaceOpen (__file)
  #endif;

#inline PortraitClose ([__face]):
  #warn at (__CALLER_FILE__, __CALLER_LINE__, 'the name PortraitClose is deprecated: use FaceClose instead')
  #ifdef __face
    FaceClose (__face)
  #else
    FaceClose
  #endif;

#inline streq (__a, __b):
  #warn at (__CALLER_FILE__, __CALLER_LINE__, 'the name streq is deprecated: the function is now called strpos. If you want a comparison function, use strcmp instead.')
  return strpos (__a, __b);

#inline streq2 (__a, __b):
  #warn at (__CALLER_FILE__, __CALLER_LINE__, 'the name streq2 is deprecated: the function is now called strlpos. If you want a comparison function, use strcmp instead.')
  return strpos2 (__a, __b);


//-- Wrappers for overloading --

#inline GetCursorPos (__x, __y, [__btn1], __btn2 = store):
  #ifdef __btn1 && __btn2
    __gc1 (__x, __y, __btn1, __btn2)
  #else
    __gc2 (__x, __y)
  #endif;

#inline SetWindowAttr (__r, __g, __b, [__a], [__f]):
  #ifdef __f
    SetWindowAttr (__r, __g, __b, __a, __f)
  #elseif defined? (__a)
    __swaRGBA (__r, __g, __b, __a)
  #else
    __swaRGB (__r, __g, __b)
  #endif;

#inline GetWindowAttr (__r, __g, __b, [__a], [__f]):
  #ifdef __f
    GetWindowAttr (__r, __g, __b, __a, __f)
  #elseif defined? (__a)
    __gwaRGBA (__r, __g, __b, __a)
  #else
    __gwaRGB (__r, __g, __b)
  #endif;

#inline DefWindowAttr (__r, __g, __b, [__a], [__f]):
  #ifdef __f
    DefWindowAttr (__r, __g, __b, __a, __f)
  #elseif defined? (__a)
    __dwaRGBA (__r, __g, __b, __a)
  #else
    __dwaRGB (__r, __g, __b)
  #endif;

#inline GetWindowAttr2 (__r, __g, __b, __a, __f):
  #if __addr(__f) >> 16 != MEMARR_A
    #warn at (__CALLER_FILE__, __CALLER_LINE__, 'called GetWindowAttr2() with filter outside intA[]. Memory will be clobbered. If this is not what you want, use GetWindowAttr() instead.')
  #endif
  GetWindowAttr2 (__r, __g, __b, __a, __f);

#inline SetWakuMod (__win, __mod):
  if __mod, __ewm (__win) else __dwm (__win);

#inline SetWindowAttrMod (__win, __mod):
  case __mod
  of 0, __sam0 (__win) break
  of 1, __sam1 (__win) break
  of 2, __sam2 (__win) break
  other
    #if __ConstantCase__
      #error at (__CALLER_FILE__, __CALLER_LINE__, 'invalid mode for SetWindowAttrMod')
    #else
      rlcError ('invalid mode for SetWindowAttrMod')
    #endif
  ecase;
  
#inline ShakeScreen (__dir, __extent, __speed, __rep, __faderep):
  case __dir
  of UP         __shkup (__extent, __speed, __rep, __faderep)  break
  of DOWN       __shkdn (__extent, __speed, __rep, __faderep)  break
  of LEFT       __shkle (__extent, __speed, __rep, __faderep)  break
  of RIGHT      __shkri (__extent, __speed, __rep, __faderep)  break
  of DOWNUP     __shkud (__extent, __speed, __rep, __faderep)  break
  of RIGHTLEFT  __shkrl (__extent, __speed, __rep, __faderep)  break
  of ZOOM       __shkzm (__extent, __speed, __rep, __faderep)  break
  other
    #if __ConstantCase__
      #error at (__CALLER_FILE__, __CALLER_LINE__, 'invalid direction for ShakeScreen')
    #else
      rlcError ('invalid direction for ShakeScreen')
    #endif
  ecase;

#inline ShakeScreenEx (__dir, __extent, __speed, __rep, __faderep):
  case __dir
  of UP         __xshkup (__extent, __speed, __rep, __faderep)  break
  of DOWN       __xshkdn (__extent, __speed, __rep, __faderep)  break
  of LEFT       __xshkle (__extent, __speed, __rep, __faderep)  break
  of RIGHT      __xshkri (__extent, __speed, __rep, __faderep)  break
  of DOWNUP     __xshkud (__extent, __speed, __rep, __faderep)  break
  of RIGHTLEFT  __xshkrl (__extent, __speed, __rep, __faderep)  break
  of ZOOM       __xshkzm (__extent, __speed, __rep, __faderep)  break
  other
    #if __ConstantCase__
      #error at (__CALLER_FILE__, __CALLER_LINE__, 'invalid direction for ShakeScreenEx')
    #else
      rlcError ('invalid direction for ShakeScreenEx')
    #endif
  ecase;

#inline ShakeLayers (__dir, __extent, __speed, __rep, __faderep, __a, __b = 0, __c = 0, __d = 0, [__e]):
  case __dir
  of UP        #ifdef __e, __shlup (__extent, __speed, __rep, __faderep, __a, __b, __c, __d, __e) #else __shlup (__extent, __speed, __rep, __faderep, __a, __b, __c, __d) #endif break
  of DOWN      #ifdef __e, __shldn (__extent, __speed, __rep, __faderep, __a, __b, __c, __d, __e) #else __shldn (__extent, __speed, __rep, __faderep, __a, __b, __c, __d) #endif break
  of LEFT      #ifdef __e, __shlle (__extent, __speed, __rep, __faderep, __a, __b, __c, __d, __e) #else __shlle (__extent, __speed, __rep, __faderep, __a, __b, __c, __d) #endif break
  of RIGHT     #ifdef __e, __shlri (__extent, __speed, __rep, __faderep, __a, __b, __c, __d, __e) #else __shlri (__extent, __speed, __rep, __faderep, __a, __b, __c, __d) #endif break
  of DOWNUP    #ifdef __e, __shlud (__extent, __speed, __rep, __faderep, __a, __b, __c, __d, __e) #else __shlud (__extent, __speed, __rep, __faderep, __a, __b, __c, __d) #endif break
  of RIGHTLEFT #ifdef __e, __shlrl (__extent, __speed, __rep, __faderep, __a, __b, __c, __d, __e) #else __shlrl (__extent, __speed, __rep, __faderep, __a, __b, __c, __d) #endif break
  other
    #if __ConstantCase__
      #error at (__CALLER_FILE__, __CALLER_LINE__, 'invalid direction for ShakeLayers')
    #else
      rlcError ('invalid direction for ShakeLayers')
    #endif
  ecase;

#inline ShakeLayersEx (__dir, __extent, __speed, __rep, __faderep, __a, __b = 0, __c = 0, __d = 0, [__e]):
  case __dir
  of UP        #ifdef __e, __xshlup (__extent, __speed, __rep, __faderep, __a, __b, __c, __d, __e) #else __xshlup (__extent, __speed, __rep, __faderep, __a, __b, __c, __d) #endif break
  of DOWN      #ifdef __e, __xshldn (__extent, __speed, __rep, __faderep, __a, __b, __c, __d, __e) #else __xshldn (__extent, __speed, __rep, __faderep, __a, __b, __c, __d) #endif break
  of LEFT      #ifdef __e, __xshlle (__extent, __speed, __rep, __faderep, __a, __b, __c, __d, __e) #else __xshlle (__extent, __speed, __rep, __faderep, __a, __b, __c, __d) #endif break
  of RIGHT     #ifdef __e, __xshlri (__extent, __speed, __rep, __faderep, __a, __b, __c, __d, __e) #else __xshlri (__extent, __speed, __rep, __faderep, __a, __b, __c, __d) #endif break
  of DOWNUP    #ifdef __e, __xshlud (__extent, __speed, __rep, __faderep, __a, __b, __c, __d, __e) #else __xshlud (__extent, __speed, __rep, __faderep, __a, __b, __c, __d) #endif break
  of RIGHTLEFT #ifdef __e, __xshlrl (__extent, __speed, __rep, __faderep, __a, __b, __c, __d, __e) #else __xshlrl (__extent, __speed, __rep, __faderep, __a, __b, __c, __d) #endif break
  other
    #if __ConstantCase__
      #error at (__CALLER_FILE__, __CALLER_LINE__, 'invalid direction for ShakeLayersEx')
    #else
      rlcError ('invalid direction for ShakeLayersEx')
    #endif
  ecase;


//-- Wrappers for versioning --

#inline LoadDLL (__index, __filename):
  #sdefine __retval = store
  #if target_lt (1,2)
    #warn at (__CALLER_FILE__, __CALLER_LINE__, 'LoadDLL() is not supported in pre-1.2 targets')
    #redef __retval = 0
  #elseif target_ge (1,3,2)
    #warn at (__CALLER_FILE__, __CALLER_LINE__, 'LoadDLL() is not supported in post-1.3.2 targets')
    #redef __retval = 0
  #elseif target_lt (1,2,5)
    #if !const_eq? (__index, 0)
      #warn at (__CALLER_FILE__, __CALLER_LINE__, 'The `index\' parameter to LoadDLL is not used in early 1.2 targets and will be ignored. Use an index of 0 to disable this warning')
    #endif
    LoadDLL (__filename)
  #else
    LoadDLL (__index, __filename)
  #endif
  return __retval;

#inline UnloadDLL (__index):
  #sdefine __retval = store
  #if target_lt (1,2)
    #warn at (__CALLER_FILE__, __CALLER_LINE__, 'UnloadDLL() is not supported in pre-1.2 targets')
    #redef __retval = 0
  #elseif target_ge (1,3,2)
    #warn at (__CALLER_FILE__, __CALLER_LINE__, 'UnloadDLL() is not supported in post-1.3.2 targets')
    #redef __retval = 0
  #elseif target_lt (1,2,5)
    #if !const_eq? (__index, 0)
      #warn at (__CALLER_FILE__, __CALLER_LINE__, 'The `index\' parameter to UnloadDLL is not used in early 1.2 targets and will be ignored. Use an index of 0 to disable this warning')
    #endif
    UnloadDLL
  #else
    UnloadDLL (__index)
  #endif
  return __retval;

#inline CallDLL (__index, [__arg1], [__arg2], [__arg3], [__arg4], [__arg5]):
  #sdefine __retval = store
  #if target_lt (1,2)
    #warn at (__CALLER_FILE__, __CALLER_LINE__, 'CallDLL() is not supported in pre-1.2 targets')
    #redef __retval = 0
  #elseif target_lt (1,2,5)
    #if !const_eq? (__index, 0)
      #warn at (__CALLER_FILE__, __CALLER_LINE__, 'The `index\' parameter to CallDLL is not used in early 1.2 targets and will be ignored. Use an index of 0 to disable this warning')
    #endif
    #if     defined? (__arg5), CallDLL (__arg1, __arg2, __arg3, __arg4, __arg5)
    #elseif defined? (__arg4), CallDLL (__arg1, __arg2, __arg3, __arg4)
    #elseif defined? (__arg3), CallDLL (__arg1, __arg2, __arg3)
    #elseif defined? (__arg2), CallDLL (__arg1, __arg2)
    #elseif defined? (__arg1), CallDLL (__arg1)
    #else                      CallDLL (0)
    #endif
  #else
    #if     defined? (__arg5), CallDLL (__index, __arg1, __arg2, __arg3, __arg4, __arg5)
    #elseif defined? (__arg4), CallDLL (__index, __arg1, __arg2, __arg3, __arg4)
    #elseif defined? (__arg3), CallDLL (__index, __arg1, __arg2, __arg3)
    #elseif defined? (__arg2), CallDLL (__index, __arg1, __arg2)
    #elseif defined? (__arg1), CallDLL (__index, __arg1)
    #else                      CallDLL (__index)
    #endif
  #endif
  return __retval;

#inline grpDisplay (__dc, __sel, [__x1], [__y1], __x2 = 639, __y2 = 479, __dx = 0, __dy = 0, [__e0], [__e1], __e2 = 0, __e3 = 0, __e4 = 0, __e5 = 0, __e6 = 0, __e7 = 0, __e8 = 0):
  #ifndef __x1
    grpDisplay (__dc, __sel)
  #elseif !defined? (__y1)
    #if target_lt (1,1)
      #warn at (__CALLER_FILE__, __CALLER_LINE__, 'the `alpha\' parameter to grpDisplay is not used in target versions prior to 1.1 and will be ignored')
      grpDisplay (__dc, __sel)
    #else
      grpDisplay (__dc, __sel, __x1)
    #endif
  #elseif !defined? (__e0)
    grpDisplay (__dc, __sel, __x1, __y1, __x2, __y2, __dx, __dy)
  #elseif !defined? (__e1)
    #if target_lt (1,1)
      #warn at (__CALLER_FILE__, __CALLER_LINE__, 'the `alpha\' parameter to grpDisplay is not used in target versions prior to 1.1 and will be ignored')
      grpDisplay (__dc, __sel, __x1, __y1, __x2, __y2, __dx, __dy)
    #else
      grpDisplay (__dc, __sel, __x1, __y1, __x2, __y2, __dx, __dy, __e0)
    #endif
  #else
    grpDisplay (__dc, __sel, __x1, __y1, __x2, __y2, __dx, __dy, __e0, __e1, __e2, __e3, __e4, __e5, __e6, __e7, __e8)
  #endif;


//-- Array wrappers --

#inline setrng (__arg1, [__arg2], [__arg3]):
  #if array? (__arg1)
    #ifdef __arg3
      #error at (__CALLER_FILE__, __CALLER_LINE__, "`setrng(array, [val])' takes only one or two parameters")
    #endif
    #ifndef __arg2
      setrng (__arg1[0], __arg1[length (__arg1) - 1])
    #else
      setrng (__arg1[0], __arg1[length (__arg1) - 1], __arg2)
    #endif
  #else
    #ifndef __arg2
      #error at (__CALLER_FILE__, __CALLER_LINE__, "`setrng(first, last, [val])' must have at least two parameters")
    #endif
    #ifndef __arg3
      setrng (__arg1, __arg2)
    #else
      setrng (__arg1, __arg2, __arg3)
    #endif
  #endif;

#inline strclear (__first, [__last]):
  #ifdef __last
    #if array? (__first)
      #error at (__CALLER_FILE__, __CALLER_LINE__, "`strclear(array)' takes only one parameter")
    #else
      strclear (__first, __last)
    #endif
  #elseif array? (__first)
    strclear (__first[0], __first[length (__first) - 1])
  #else
    strclear (__first)
  #endif;


//-- Wrappers for efficiency --

#inline rnd (__a, [__b]):
  #ifndef __b
    rnd (__a)
  #else
    #if const_eq? (__a, 0)
      rnd (__b)
    #else
      rnd (__a, __b)
    #endif
  #endif
  return store;


{- These also make it possible to use these functions in constant
   expressions when all their arguments are constant. -}

#inline max (__a, __b):
  #sdefine __retval = store
  #if __INLINE_CALL__
    #if constant? (__a, __b)
      #if __a > __b #redef __retval = __a #else #redef __retval = __b #endif
    #else
      #redef __retval = at (__CALLER_FILE__, __CALLER_LINE__, max (__a, __b))
    #endif
  #else
    #if constant? (__a, __b)
      #if __a > __b, store = __a #else store = __b #endif
    #else
      #redef __retval = max (__a, __b)
    #endif
  #endif
  return __retval;

#inline min (__a, __b):
  #sdefine __retval = store
  #if __INLINE_CALL__
    #if constant? (__a, __b)
      #if __a < __b #redef __retval = __a #else #redef __retval = __b #endif
    #else
      #redef __retval = at (__CALLER_FILE__, __CALLER_LINE__, min (__a, __b))
    #endif
  #else
    #if constant? (__a, __b)
      #if __a < __b, store = __a #else store = __b #endif
    #else
      #redef __retval = min (__a, __b)
    #endif
  #endif
  return __retval;

#inline constrain (__a, __b, __c):
  #sdefine __retval = store
  #if __INLINE_CALL__
    #if constant? (__a, __b, __c)
      #if __b < __a #redef __retval = __a #elseif __b > __c #redef __retval = __c #else #redef __retval = __b #endif
    #else
      #redef __retval = at (__CALLER_FILE__, __CALLER_LINE__, constrain (__a, __b, __c))
    #endif
  #else
    #if constant? (__a, __b, __c)
      #if __b < __a, store = __a #elseif __b > __c, store = __c #else store = __b #endif
    #else
      #redef __retval = constrain (__a, __b, __c)
    #endif
  #endif
  return __retval;

#inline abs (__a):
  #sdefine __retval = store
  #if __INLINE_CALL__
    #if constant? (__a)
      #if __a >= 0 #redef __retval = __a #else #redef __retval = -__a #endif
    #else
      #redef __retval = at (__CALLER_FILE__, __CALLER_LINE__, abs (__a))
    #endif
  #else
    #if constant? (__a)
      #if __a >= 0, store = __a #else store = -__a #endif
    #else
      #redef __retval = abs (__a)
    #endif
  #endif
  return __retval;

#inline sign (__a):
  #sdefine __retval = store
  #if __INLINE_CALL__
    #if constant? (__a)
      #if __a == 0 #redef __retval = 0 #elseif __a > 0 #redef __retval = 1 #else #redef __retval = -1 #endif
    #else
      #redef __retval = at (__CALLER_FILE__, __CALLER_LINE__, sign (__a))
    #endif
  #else
    #if constant? (__a)
      #if __a == 0, store = 0 #elseif __a > 0, store = 1 #else store = -1 #endif
    #else
      #redef __retval = sign (__a)
    #endif
  #endif
  return __retval;


#inline power (__base, __exp):
  #sdefine __retval = store
  #if __INLINE_CALL__
    #if constant? (__base, __exp)
      #if __exp <= 0
        #redef __retval = 1
      #else
        #undef __retval
        #const __retval = __base
        #for i = 2 .. __exp #set __retval *= __base
      #endif
    #elseif constant? (__exp)
      #if __exp <= 0
        #redef __retval = 1
      #else
        case __exp
        of 1  #redef __retval = __base                             break
        of 2  #redef __retval = __base * __base                    break
        of 3  #redef __retval = __base * __base * __base           break
        of 4  #redef __retval = __base * __base * __base * __base  break
        other #redef __retval = at (__CALLER_FILE__, __CALLER_LINE__, power (__base, __exp))
        ecase
      #endif
    #else
      #redef __retval = at (__CALLER_FILE__, __CALLER_LINE__, power (__base, __exp))
    #endif
  #else
    #if constant? (__base, __exp)
      #if __exp <= 0
        store = 1
      #else
        #const __temp = __base
        #for i = 2 .. __exp #set __temp *= __base
        store = __temp
      #endif
    #else
      #redef __retval = power (__base, __exp)
    #endif
  #endif
  return __retval;
  

//-- Debugging functions --

{- These wrappers streamline the interface, and also eliminate these functions 
   altogether from code not compiled with debug symbols. -}

#inline __DebugMsgBox (__debugmsg__, __debugtype__ = DEBUG_OK):
  #sdefine __retval = store
  #ifndef __NoDebug__
    #if __debugtype__ == DEBUG_OK
      #undef __CALLER_FILE__, __CALLER_LINE__ // We don't want to override these if they were passed in __debugmsg__...
      __DebugMsgBox (__debugmsg__)
      #define __CALLER_FILE__, __CALLER_LINE__ // ...and we don't want rlc to undefine the caller's copies, either.
    #elseif __debugtype__ == DEBUG_OKCANCEL
      #redef __retval = __dbmoc (__debugmsg__)
    #elseif __debugtype__ == DEBUG_YESNO
      #redef __retval = __dbmyn (__debugmsg__)
    #else
      #error 'invalid parameter to __DebugMsgBox: expected DEBUG_OK, DEBUG_OKCANCEL, or DEBUG_YESNO'
    #endif
  #endif
  return __retval;

#inline __DebugMessage (__debugmsg__):
  #ifndef __NoDebug__
    #undef __CALLER_FILE__, __CALLER_LINE__
    __DebugMessage (__debugmsg__)
    #define __CALLER_FILE__, __CALLER_LINE__
  #endif;

#inline __Memory? ():
  #sdefine __retval = 0
  #ifndef __NoDebug__
    #redef __retval = __Memory?
  #endif
  return __retval;

#inline __Debugging? ():
  #sdefine __retval = 0
  #ifndef __NoDebug__
    #redef __retval = __Debugging?
  #endif
  return __retval;

#inline __DebugInputStr (__prompt__, [__default__]):
  #sdefine __retval = ''
  #ifndef __NoDebug__
    #ifndef __default__
      #redef __retval = __DebugInputStr (__prompt__)
    #else
      #redef __retval = __DebugInputStr (__prompt__, __default__)
    #endif
  #endif
  return __retval;

#inline __DebugInputInt (__prompt__, [__default__], [__min__], __max__ = MAXINT):
  #sdefine __retval = 0
  #ifndef __NoDebug__
    #ifdef __min__
      #redef __retval = __DebugInputInt (__prompt__, __default__, __min__, __max__)
    #elseif defined? (__default__)
      #redef __retval = __DebugInputInt (__prompt__, __default__)
    #else
      #redef __retval = __DebugInputInt (__prompt__)
    #endif
  #endif
  return __retval;

#inline __DebugStartTimer ([__timer__]):
  #ifndef __NoDebug__
    #ifndef __timer__
      __DebugStartTimer
    #else
      __DebugStartTimer (__timer__)
    #endif
  #endif;

#inline __DebugGetElapsed ([__timer__]):
  #sdefine __retval = 0
  #ifndef __NoDebug__
    #ifndef __timer__
      #redef __retval = __DebugGetElapsed
    #else
      #redef __retval = __DebugGetElapsed (__timer__)
    #endif
  #endif
  return __retval;


//-- Miscellaneous --

#inline __doruby (__arg = ''):
  #if __CALLER_LINE__ >= 0
    #error at (__CALLER_FILE__, __CALLER_LINE__, "the __doruby() function is private; use \\ruby{} codes to insert furigana")
  #else
    #if __empty_string? (__arg)
      __doruby
    #else
      __doruby (__arg)
    #endif
  #endif;


#undef __HideFunctionsSilently__
#endif // !defined(__RLAPI_KH__)
