{-# enc CP932 #-
  system.kh: Kepago/RealLive RTL main functions.

  This file is loaded automatically.  You should not need to link to it
  yourself.

  The RLdev run-time library is copyright (c) 2006 Peter Jolly.

  This file is part of RLdev, which is licensed under the GNU General Public
  License, version 2.  This file may be considered an integral part of the
  compiler; programs are therefore permitted to include this code, as
  automatically included by the rlc compiler, without thereby being classed as
  derivative works.  This means that programs compiled with RLdev are not ipso
  facto required to be licensed under the GNU GPL, although this does not affect
  any other reason why they might be required to be so licensed, nor are any
  other uses of this code so exempted.
-}

#ifndef __SYSTEM_KH__
#define __SYSTEM_KH__

//-- Sanity checks --

#if defined?(__KPC3__) || defined?(__KPAC_DELPHI__) || defined?(__AVG32__)
  {- We use the long form "defined?" instead of plain symbols because kpc doesn't
     recognise the short form, and we want kpc to get this far (but no further). -}
  #error 'this version of the Kepago RTL is for RealLive programs, but \
          you appear to be compiling for the AVG32 virtual machine.'
#endif


//-- Boilerplate code --

#entrypoint 0


//-- System constants --

// Limits
#const
  MAXINT = $7fffffff,
  MININT = $80000000

// Variable sections
#const
  MEMARR_A = 0,
  MEMARR_B = 1,
  MEMARR_C = 2,
  MEMARR_D = 3,
  MEMARR_E = 4,
  MEMARR_F = 5,
  MEMARR_G = 6,
  MEMARR_M = 12,
  MEMARR_S = 18,
  MEMARR_Z = 25,
  OFFS_BIT = 26,
  OFFS_2BIT = 52,
  OFFS_NIBBLE = 78,
  OFFS_BYTE = 104
  
// __DebugMsgBox classes (see rlapi)
#const
  DEBUG_OK       = 0, 
  DEBUG_OKCANCEL = 1, 
  DEBUG_YESNO    = 2

// ShakeScreen[Ex] directions (see rlapi)
#const
  UP        = 0,
  DOWN      = 1,
  LEFT      = 2,
  RIGHT     = 3,
  DOWNUP    = 4,
  RIGHTLEFT = 5,
  ZOOM      = 6

// GetCursorPos results
#const
  mbClear = 0,
  mbDown = 1,
  mbReleased = 2 


//-- Variable initialisation --

#const
  __int_alloc_space__ = MEMARR_C,
  __int_alloc_first__ = 0,
  __int_alloc_last__  = 1999,
  __str_alloc_space__ = MEMARR_S,
  __str_alloc_first__ = 1900,
  __str_alloc_last__  = 1999
  

//-- RTL functions --

#inline rlcSetAllocation(__ispace__, __ifirst__, __ilast__, __sfirst__, __slast__):
  #if !constant?(__ispace__, __ifirst__, __ilast__, __sfirst__, __slast__)
    #error at (__CALLER_FILE__, __CALLER_LINE__, 'all parameters to rlcSetAllocation must be constant')
  #endif
  #if __ispace__ < MEMARR_A || __ispace__ > MEMARR_F
    #error at (__CALLER_FILE__, __CALLER_LINE__, 'integer allocation must be in one of the arrays A to F')
  #endif
  #if __ifirst__ < 0 || __ifirst__ >= 2000 || __ilast__ < 0 || __ilast__ >= 2000
   || __sfirst__ < 0 || __sfirst__ >= 2000 || __slast__ < 0 || __slast__ >= 2000
    #error at (__CALLER_FILE__, __CALLER_LINE__, 'variable allocation limit out of bounds (range is 0..1999)')
  #endif
  #if __ilast__ < __ifirst__ + 99
    #error at (__CALLER_FILE__, __CALLER_LINE__, 'you must assign a block of at least 100 integers for variable allocation')
  #endif
  #if __slast__ < __sfirst__ + 9
    #error at (__CALLER_FILE__, __CALLER_LINE__, 'you must assign a block of at least 10 strings for variable allocation')
  #endif
  #set
    __int_alloc_space__ = __ispace__,
    __int_alloc_first__ = __ifirst__,
    __int_alloc_last__  = __ilast__,
    __str_alloc_first__ = __sfirst__,
    __str_alloc_last__  = __slast__;

#inline stralloc (__str, __len):
  {- Ensures a string has room for [len] bytes. -}
  store = 8, __str = '        '
  while store < __len:
    __str += __str
    store *= 2;;

#inline rlcInit ():
  {- Must be called at the start of a program to enable some RTL
     functionality. -}
  #ifdef __initialise_utility_dll
    __initialise_utility_dll
  #endif
  #if default (__DynamicLineation__, 0)
    __initialise_dynamic_textout
  #endif;

#inline rlcError (msg):
  __DebugMsgBox ('Kepago/RealLive RTL error: ' + msg);

#inline assert (assertion, failure_message = '', compiletime_only = 0):
  {- If `assertion' can be evaluated at compile-time, raises a compilation error if
     if is false, otherwise does nothing.
     If `assertion' cannot be evaluated at compile-time, inserts a runtime check
     unless `__NoAssert__' is defined, in which case does nothing. -}
  #const tmp = !constant? (failure_message)
  #if !tmp #set tmp = !__empty_string? (failure_message) #endif
  #if tmp
    #sdefine message = ': ' + failure_message
  #else
    #sdefine message = failure_message
  #endif
  #undef tmp
  #if constant? (assertion)
    #if !assertion
      #if !constant? (failure_message) #set message = '' #endif
      #error at (__CALLER_FILE__, __CALLER_LINE__, 'assertion failure' + message)
    #endif
  #elseif compiletime_only
    #error at (__CALLER_FILE__, __CALLER_LINE__, 'compile-time assertion asserts non-constant expression')
  #else
    #ifndef __NoAssert__ && __NoDebug__
      if !assertion:
        #const __clf__ = __CALLER_FILE__, __cll__ = __CALLER_LINE__
        if __DebugMsgBox ('assertion failure at \s{__clf__} line \i{__cll__}' 
                          + message + '. Continue execution?', DEBUG_YESNO)
          halt;
    #endif
  #endif;

#inline const_eq? (ident, test):
  return constant? (ident) && ident == test;

#inline in_gameexe? (key):
  return gameexe (key, 0, MININT) != MININT;


//-- Additional utility functions --

#inline ScreenWidth ():
  #const __retval = 640
  #if gameexe ('SCREENSIZE_MOD', 0, 0) == 1 #set __retval = 800 #endif
  return __retval;

#inline ScreenHeight ():
  #const __retval = 480
  #if gameexe ('SCREENSIZE_MOD', 0, 0) == 1 #set __retval = 600 #endif
  return __retval;


//-- Load other headers as required: they may depend on the above functions --

// API wrappers
#load 'rlapi'

// Dynamic lineation support
#ifndef __dynamic_textout_print #inline __dynamic_textout_print():; #endif
#ifndef __DynamicLineation__ #const __DynamicLineation__ = 0 #endif
#if __DynamicLineation__
  #load 'textout'
#endif


#endif // !defined? (__SYSTEM_KH__)