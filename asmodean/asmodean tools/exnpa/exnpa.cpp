// exnpa.cpp, v1.31 2012/08/14
// coded by asmodean

// contact: 
//   web:   http://asmodean.reverse.net
//   email: asmodean [at] hush.com
//   irc:   asmodean on efnet (irc.efnet.net)

// This tool extracts Nitro+'s *.npa archives.
// Compile with -DLAMENTO to support Lamento -Beyond the Void-'s variety.
// Compile with -DCHAOSHEAD to support CHAOS;HEAD
// Compile with -DSMG to support SUMAGA
// Compile with -DSWEETPOOL to support SWEET POOL
// Compile with -DCHNOA for CHAOS;HEAD NOAH
// Compile with -DMURAMASA for ëïçbà´ãSë∫ê≥
// Compile with -DMURAMASAAD for ëïçbà´ãSë∫ê≥ é◊îOï“
// Compile with -DAXANAEL for ÉAÉUÉiÉGÉã
// Compile with -DKIKOKUGAI for ãSöLäX
// Compile with -DSONICOMI for É\ÉjÉRÉ~
// Compile with -DDMMD for DRAMAtical Murder
// Compile with -DGCLC for Guilty Crown Lost Christmas
//
// [Yes, it should be in a table... I don't care.]

#include "as-util.h"
#include "zlib.h"

// Lamento has various small differences in the obfuscation.
//#define LAMENTO

// The rest are the same ... I should add a game parameter.
//#define CHAOSHEAD
//#define SMG
//#define SWEETPOOL
//#define MURAMASA
//#define MURAMASAAD
//#define AXANAEL
//#define KIKOKUGAI
//#define SONICOMI
//#define DMMD
#define GCLC

// What, no data obfuscation?!
//#define CHNOAH

#pragma pack(1)
struct NPAHDR {
  unsigned char signature[3];
  unsigned long unknown1;
  unsigned long seed1;
  unsigned long seed2;
  unsigned char unknown2[2];
  unsigned long entry_count;
  unsigned long unknown3;
  unsigned long file_count; // excluding directories
  unsigned long unknown4;
  unsigned long unknown5;
  unsigned long toc_length;
};

struct NPAENTRY1 {
  unsigned long  filename_length;
};

struct NPAENTRY2 {
  unsigned char unknown1;
  unsigned long unknown2;
  unsigned long offset;
  unsigned long length;
  unsigned long original_length;
};

struct NPSIHDR {
  unsigned char  signature[4]; // "NPSI"
  unsigned long  unknown1;
  unsigned short unknown2;
  unsigned long  width;
  unsigned long  width2;
  unsigned long  height;
  unsigned long  height2;
};
#pragma pack()

#if defined(SWEETPOOL)
unsigned char REORDER_TABLE[256] = {
  0x7A, 0x3A, 0x23, 0xD1, 0xDF, 0x8A, 0x3C, 0x37, 0x43, 0xFF, 0x71, 0x10, 0xB8, 0x9C, 0xCC, 0xF3, 
  0x3B, 0x48, 0x05, 0xE0, 0xF6, 0xE2, 0xC2, 0x87, 0xC8, 0x91, 0x06, 0x61, 0xA8, 0x60, 0xE8, 0xE1, 
  0x54, 0x70, 0x50, 0x08, 0xD7, 0xD5, 0xBB, 0xCB, 0xA5, 0x45, 0x93, 0xBD, 0x01, 0x73, 0xE5, 0x81, 
  0xF7, 0x6C, 0xF2, 0xE3, 0x39, 0x21, 0xFC, 0x53, 0x32, 0xE6, 0x68, 0x88, 0x1E, 0x99, 0xA1, 0xFE, 
  0x3F, 0xCA, 0x2E, 0x30, 0x18, 0x28, 0x6E, 0x41, 0xEB, 0xC5, 0x86, 0x62, 0xF4, 0x2D, 0xB4, 0x29, 
  0x09, 0x4C, 0xB2, 0x56, 0x3E, 0x9F, 0x0A, 0x92, 0x85, 0xBC, 0x4A, 0xC0, 0x34, 0x58, 0x6F, 0xBE, 
  0x97, 0x0B, 0x5B, 0xF9, 0x47, 0xAD, 0xA6, 0x07, 0xD0, 0x4E, 0x84, 0x5D, 0xA4, 0x1B, 0x7C, 0x83, 
  0x15, 0x65, 0x31, 0x4D, 0x2B, 0x5F, 0x26, 0x42, 0x55, 0x22, 0xF8, 0xBF, 0xB5, 0xA2, 0x14, 0xCF, 
  0x82, 0xBA, 0xB7, 0xF0, 0xAE, 0x20, 0x9E, 0x51, 0xFA, 0xD3, 0x78, 0x0D, 0x63, 0xB1, 0x8E, 0xC1, 
  0x1D, 0x12, 0x67, 0x6D, 0x40, 0x04, 0x79, 0x27, 0xFB, 0x7E, 0x5C, 0xA9, 0x5E, 0x74, 0x4F, 0xDB, 
  0xD4, 0x8C, 0x77, 0xCD, 0x2A, 0x2F, 0x69, 0xC9, 0x16, 0x2C, 0xC6, 0x52, 0x5A, 0x59, 0xEE, 0xA7, 
  0x44, 0x89, 0xC7, 0x1F, 0xFD, 0x64, 0x1C, 0x9B, 0xC3, 0x03, 0xF5, 0x7B, 0x35, 0xD9, 0xD6, 0x8B, 
  0xAC, 0xAA, 0xDE, 0x1A, 0x19, 0xAF, 0x98, 0x8D, 0x57, 0xC4, 0xEC, 0x94, 0x0C, 0xEF, 0x7F, 0xB3, 
  0x72, 0x13, 0x25, 0xDC, 0x80, 0x96, 0x66, 0x95, 0xCE, 0x46, 0x0F, 0xE4, 0x02, 0xE9, 0xED, 0x17, 
  0xA0, 0xAB, 0x11, 0x36, 0xEA, 0x00, 0x6B, 0x3D, 0xB0, 0x6A, 0xA3, 0x49, 0xDA, 0x9D, 0x4B, 0x0E, 
  0x7D, 0xD8, 0x9A, 0xD2, 0x33, 0xE7, 0x75, 0x24, 0xB6, 0xB9, 0x38, 0x8F, 0xDD, 0xF1, 0x76, 0x90, 
};
#elif defined(SMG)
unsigned char REORDER_TABLE[256] = {
  0xBF, 0x7F, 0x63, 0x11, 0x19, 0xCF, 0x76, 0x7C, 0x83, 0x39, 0xB1, 0x50, 0xFD, 0xD6, 0x06, 0x33, 
  0x75, 0x8D, 0x4A, 0x20, 0x3B, 0x22, 0x02, 0xCC, 0x0D, 0xD1, 0x4B, 0xA1, 0xED, 0xA0, 0x2D, 0x21, 
  0x94, 0xB0, 0x90, 0x4D, 0x1C, 0x1A, 0xF5, 0x05, 0xEA, 0x8A, 0xD3, 0xF7, 0x41, 0xB3, 0x2A, 0xC1, 
  0x3C, 0xA6, 0x32, 0x23, 0x7E, 0x61, 0x36, 0x93, 0x72, 0x2B, 0xAD, 0xCD, 0x58, 0xDE, 0xE1, 0x38, 
  0x79, 0x0F, 0x68, 0x70, 0x5D, 0x6D, 0xA8, 0x81, 0x25, 0x0A, 0xCB, 0xA2, 0x34, 0x67, 0xF4, 0x6E, 
  0x4E, 0x86, 0xF2, 0x9B, 0x78, 0xD9, 0x4F, 0xD2, 0xCA, 0xF6, 0x8F, 0x00, 0x74, 0x9D, 0xA9, 0xF8, 
  0xDC, 0x45, 0x95, 0x3E, 0x8C, 0xE7, 0xEB, 0x4C, 0x10, 0x88, 0xC4, 0x97, 0xE4, 0x55, 0xB6, 0xC3, 
  0x5A, 0xAA, 0x71, 0x87, 0x65, 0x99, 0x6B, 0x82, 0x9A, 0x62, 0x3D, 0xF9, 0xFA, 0xE2, 0x54, 0x09, 
  0xC2, 0xFF, 0xFC, 0x30, 0xE8, 0x60, 0xD8, 0x91, 0x3F, 0x13, 0xBD, 0x47, 0xA3, 0xF1, 0xC8, 0x01, 
  0x57, 0x52, 0xAC, 0xA7, 0x80, 0x44, 0xBE, 0x6C, 0x35, 0xB8, 0x96, 0xEE, 0x98, 0xB4, 0x89, 0x15, 
  0x14, 0xC6, 0xBC, 0x07, 0x6F, 0x69, 0xAE, 0x0E, 0x5B, 0x66, 0x0B, 0x92, 0x9F, 0x9E, 0x28, 0xEC, 
  0x84, 0xCE, 0x0C, 0x59, 0x37, 0xA4, 0x56, 0xD5, 0x03, 0x43, 0x3A, 0xB5, 0x7A, 0x1E, 0x1B, 0xC5, 
  0xE6, 0xEF, 0x18, 0x5F, 0x5E, 0xE9, 0xDD, 0xC7, 0x9C, 0x04, 0x26, 0xD4, 0x46, 0x29, 0xB9, 0xF3, 
  0xB2, 0x53, 0x6A, 0x16, 0xC0, 0xDB, 0xAB, 0xDA, 0x08, 0x8B, 0x49, 0x24, 0x42, 0x2E, 0x27, 0x5C, 
  0xE0, 0xE5, 0x51, 0x7B, 0x2F, 0x40, 0xA5, 0x77, 0xF0, 0xAF, 0xE3, 0x8E, 0x1F, 0xD7, 0x85, 0x48, 
  0xB7, 0x1D, 0xDF, 0x12, 0x73, 0x2C, 0xBA, 0x64, 0xFB, 0xFE, 0x7D, 0xC9, 0x17, 0x31, 0xBB, 0xD0, 
};
#elif defined(CHAOSHEAD)
unsigned char REORDER_TABLE[256] = {
  0xF1, 0x71, 0x80, 0x19, 0x17, 0x01, 0x74, 0x7D, 0x90, 0x47, 0xF9, 0x68, 0xDE, 0xB4, 0x24, 0x40, 
  0x73, 0x9E, 0x5B, 0x38, 0x4C, 0x3A, 0x2A, 0x0D, 0x2E, 0xB9, 0x5C, 0xE9, 0xCE, 0xE8, 0x3E, 0x39, 
  0xA2, 0xF8, 0xA8, 0x5E, 0x1D, 0x1B, 0xD3, 0x23, 0xCB, 0x9B, 0xB0, 0xD5, 0x59, 0xF0, 0x3B, 0x09, 
  0x4D, 0xE4, 0x4A, 0x30, 0x7F, 0x89, 0x44, 0xA0, 0x7A, 0x3C, 0xEE, 0x0E, 0x66, 0xBF, 0xC9, 0x46, 
  0x77, 0x21, 0x86, 0x78, 0x6E, 0x8E, 0xE6, 0x99, 0x33, 0x2B, 0x0C, 0xEA, 0x42, 0x85, 0xD2, 0x8F, 
  0x5F, 0x94, 0xDA, 0xAC, 0x76, 0xB7, 0x51, 0xBA, 0x0B, 0xD4, 0x91, 0x28, 0x72, 0xAE, 0xE7, 0xD6, 
  0xBD, 0x53, 0xA3, 0x4F, 0x9D, 0xC5, 0xCC, 0x5D, 0x18, 0x96, 0x02, 0xA5, 0xC2, 0x63, 0xF4, 0x00, 
  0x6B, 0xEB, 0x79, 0x95, 0x83, 0xA7, 0x8C, 0x9A, 0xAB, 0x8A, 0x4E, 0xD7, 0xDB, 0xCA, 0x62, 0x27, 
  0x0A, 0xD1, 0xDD, 0x48, 0xC6, 0x88, 0xB6, 0xA9, 0x41, 0x10, 0xFE, 0x55, 0xE0, 0xD9, 0x06, 0x29, 
  0x65, 0x6A, 0xED, 0xE5, 0x98, 0x52, 0xFF, 0x8D, 0x43, 0xF6, 0xA4, 0xCF, 0xA6, 0xF2, 0x97, 0x13, 
  0x12, 0x04, 0xFD, 0x25, 0x81, 0x87, 0xEF, 0x2F, 0x6C, 0x84, 0x2C, 0xAA, 0xA1, 0xAF, 0x36, 0xCD, 
  0x92, 0x0F, 0x2D, 0x67, 0x45, 0xE2, 0x64, 0xB3, 0x20, 0x50, 0x4B, 0xF3, 0x7B, 0x1F, 0x1C, 0x03, 
  0xC4, 0xC1, 0x16, 0x61, 0x6F, 0xC7, 0xBE, 0x05, 0xAD, 0x22, 0x34, 0xB2, 0x54, 0x37, 0xF7, 0xD0, 
  0xFA, 0x60, 0x8B, 0x14, 0x08, 0xBC, 0xEC, 0xBB, 0x26, 0x9C, 0x57, 0x32, 0x5A, 0x3F, 0x35, 0x6D, 
  0xC8, 0xC3, 0x69, 0x7C, 0x31, 0x58, 0xE3, 0x75, 0xD8, 0xE1, 0xC0, 0x9F, 0x11, 0xB5, 0x93, 0x56, 
  0xF5, 0x1E, 0xB1, 0x1A, 0x70, 0x3D, 0xFB, 0x82, 0xDC, 0xDF, 0x7E, 0x07, 0x15, 0x49, 0xFC, 0xB8, 
};
#elif defined(MURAMASA)
unsigned char REORDER_TABLE[256] = { 
  0x48, 0xE8, 0xD3, 0x11, 0x1D, 0x58, 0xEA, 0xE5, 0x23, 0xBD, 0x41, 0xC0, 0x86, 0x6A, 0x0A, 0xB3, 
  0xE9, 0x26, 0xAE, 0x90, 0xBF, 0x92, 0x02, 0x55, 0x06, 0x61, 0xAF, 0xF1, 0x76, 0xF0, 0x96, 0x91, 
  0x34, 0x40, 0x30, 0xA6, 0x15, 0x1E, 0x89, 0x09, 0x7E, 0x2E, 0x63, 0x8B, 0xA1, 0x43, 0x9E, 0x51, 
  0xB5, 0xFA, 0xB2, 0x93, 0xE7, 0xD1, 0xBA, 0x33, 0xE2, 0x9F, 0xF6, 0x56, 0xCC, 0x67, 0x71, 0xBC, 
  0xED, 0x08, 0xDC, 0xE0, 0xC6, 0xD6, 0xFC, 0x21, 0x99, 0x0E, 0x5F, 0xF2, 0xB4, 0xDB, 0x84, 0xD7, 
  0xA7, 0x2A, 0x82, 0x3F, 0xEC, 0x6D, 0xA8, 0x62, 0x5E, 0x8A, 0x28, 0x00, 0xE4, 0x36, 0xFD, 0x8C, 
  0x65, 0xA9, 0x39, 0xB7, 0x25, 0x7B, 0x7F, 0xA5, 0x10, 0x2C, 0x54, 0x3B, 0x74, 0xC9, 0x4A, 0x53, 
  0xCE, 0xFE, 0xE1, 0x2B, 0xD9, 0x3D, 0xDF, 0x22, 0x3E, 0xD2, 0xB6, 0x8D, 0x8E, 0x72, 0xC4, 0x0D, 
  0x52, 0x88, 0x85, 0xB0, 0x7C, 0xD0, 0x6C, 0x31, 0xB8, 0x13, 0x46, 0xAB, 0xF3, 0x81, 0x5C, 0x01, 
  0xCB, 0xC2, 0xF5, 0xFB, 0x20, 0xA4, 0x47, 0xD5, 0xB9, 0x4C, 0x3A, 0x77, 0x3C, 0x44, 0x2D, 0x19, 
  0x14, 0x5A, 0x45, 0x0B, 0xD8, 0xDD, 0xF7, 0x07, 0xCF, 0xDA, 0x0F, 0x32, 0x38, 0x37, 0x9C, 0x75, 
  0x24, 0x57, 0x05, 0xCD, 0xBB, 0xF4, 0xCA, 0x69, 0x03, 0xA3, 0xBE, 0x49, 0xEE, 0x17, 0x1F, 0x59, 
  0x7A, 0x78, 0x1C, 0xC8, 0xC7, 0x7D, 0x66, 0x5B, 0x35, 0x04, 0x9A, 0x64, 0xAA, 0x9D, 0x4D, 0x83, 
  0x42, 0xC3, 0xDE, 0x1A, 0x50, 0x6F, 0xFF, 0x6E, 0x0C, 0x2F, 0xAD, 0x94, 0xA2, 0x97, 0x9B, 0xC5, 
  0x70, 0x79, 0xC1, 0xEF, 0x98, 0xA0, 0xF9, 0xEB, 0x80, 0xF8, 0x73, 0x27, 0x18, 0x6B, 0x29, 0xAC, 
  0x4B, 0x16, 0x68, 0x12, 0xE3, 0x95, 0x4E, 0xD4, 0x8F, 0x87, 0xE6, 0x5D, 0x1B, 0xB1, 0x4F, 0x60, 
};
#elif defined(MURAMASAAD)
unsigned char REORDER_TABLE[256] = {
  0xA1, 0xF1, 0x70, 0x5F, 0x5D, 0x01, 0xFA, 0xF6, 0x80, 0xCD, 0xAF, 0xEE, 0x37, 0x1A, 0x6A, 0xC0,
  0xF9, 0x87, 0xD4, 0xBE, 0xC5, 0xB3, 0x63, 0x06, 0x67, 0x1F, 0xD5, 0x4F, 0x27, 0x4E, 0xB7, 0xBF,
  0x92, 0xAE, 0x9E, 0xD7, 0x56, 0x54, 0x39, 0x69, 0x24, 0x84, 0x10, 0x3B, 0xDF, 0xA0, 0xB4, 0x0F,
  0xC6, 0x4A, 0xC3, 0xB0, 0xF8, 0x7F, 0xCA, 0x90, 0xF3, 0xB5, 0x47, 0x07, 0xEC, 0x18, 0x2F, 0xCC,
  0xFD, 0x61, 0x7C, 0xFE, 0xE7, 0x77, 0x4C, 0x8F, 0xB9, 0x64, 0x05, 0x43, 0xC2, 0x7B, 0x32, 0x78,
  0xD8, 0x8A, 0x33, 0x95, 0xFC, 0x1D, 0xD1, 0x13, 0x04, 0x3A, 0x81, 0x6E, 0xF2, 0x97, 0x4D, 0x3C,
  0x16, 0xD9, 0x99, 0xC8, 0x86, 0x2B, 0x25, 0xD6, 0x5E, 0x8C, 0x02, 0x9B, 0x22, 0xE9, 0xAA, 0x00,
  0xE4, 0x44, 0xFF, 0x8B, 0x79, 0x9D, 0x75, 0x83, 0x94, 0x73, 0xC7, 0x3D, 0x34, 0x23, 0xE2, 0x6D,
  0x03, 0x31, 0x36, 0xCE, 0x2C, 0x7E, 0x1C, 0x9F, 0xC1, 0x50, 0xA7, 0xDB, 0x40, 0x3F, 0x0C, 0x6F,
  0xEB, 0xE3, 0x46, 0x4B, 0x8E, 0xD2, 0xA8, 0x76, 0xC9, 0xAC, 0x9A, 0x28, 0x9C, 0xA2, 0x8D, 0x59,
  0x52, 0x0A, 0xA6, 0x6B, 0x71, 0x7D, 0x48, 0x68, 0xE5, 0x7A, 0x65, 0x93, 0x91, 0x98, 0xBC, 0x26,
  0x82, 0x08, 0x66, 0xED, 0xCB, 0x42, 0xEA, 0x19, 0x60, 0xD0, 0xC4, 0xA9, 0xF4, 0x58, 0x55, 0x09,
  0x2A, 0x21, 0x5C, 0xE1, 0xE8, 0x2D, 0x17, 0x0B, 0x96, 0x62, 0xBA, 0x12, 0xDA, 0xBD, 0xAD, 0x30,
  0xA3, 0xE0, 0x74, 0x5A, 0x0E, 0x15, 0x45, 0x14, 0x6C, 0x85, 0xDD, 0xB2, 0xD3, 0xB8, 0xBB, 0xE6,
  0x2E, 0x29, 0xEF, 0xF5, 0xB1, 0xDE, 0x49, 0xFB, 0x3E, 0x41, 0x20, 0x88, 0x51, 0x1B, 0x89, 0xDC,
  0xAB, 0x57, 0x11, 0x53, 0xF0, 0xB6, 0xA4, 0x72, 0x35, 0x38, 0xF7, 0x0D, 0x5B, 0xCF, 0xA5, 0x1E,
};
#elif defined(AXANAEL)
unsigned char REORDER_TABLE[256] = {
  0x21, 0x71, 0xF0, 0xD8, 0xD6, 0x81, 0x73, 0x7C, 0x00, 0x46, 0x28, 0x67, 0xBD, 0x93, 0xE3, 0x40,
  0x7F, 0x0D, 0x5A, 0x37, 0x4B, 0x39, 0xE9, 0x8C, 0xED, 0x98, 0x5B, 0xC8, 0xAD, 0xC7, 0x3D, 0x38,
  0x12, 0x27, 0x17, 0x5D, 0xDC, 0xDA, 0xBF, 0xEF, 0xAA, 0x0A, 0x90, 0xB4, 0x58, 0x20, 0x3A, 0x88,
  0x4C, 0xC3, 0x49, 0x30, 0x7E, 0xF8, 0x43, 0x10, 0x79, 0x3B, 0xCD, 0x8D, 0x65, 0x9E, 0xA8, 0x45,
  0x76, 0xE1, 0xF5, 0x77, 0x6D, 0xFD, 0xC5, 0x08, 0x3F, 0xEA, 0x8B, 0xC9, 0x42, 0xF4, 0xB2, 0xFE,
  0x5E, 0x03, 0xB9, 0x1B, 0x75, 0x96, 0x51, 0x99, 0x8A, 0xB3, 0x01, 0xE7, 0x72, 0x1D, 0xC6, 0xB5,
  0x9C, 0x5F, 0x1F, 0x4E, 0x0C, 0xA4, 0xAB, 0x5C, 0xD7, 0x05, 0x82, 0x14, 0xA2, 0x6F, 0x23, 0x80,
  0x6A, 0xCA, 0x78, 0x04, 0xFF, 0x16, 0xFB, 0x09, 0x1A, 0xF9, 0x4D, 0xB6, 0xBA, 0xA9, 0x62, 0xE6,
  0x89, 0xB1, 0xBC, 0x47, 0xA5, 0xF7, 0x95, 0x18, 0x41, 0xD0, 0x2D, 0x54, 0xC0, 0xB8, 0x85, 0xE8,
  0x64, 0x69, 0xCC, 0xC4, 0x07, 0x52, 0x2E, 0xFC, 0x4F, 0x25, 0x13, 0xAE, 0x15, 0x22, 0x06, 0xDF,
  0xD2, 0x83, 0x2C, 0xE4, 0xF1, 0xF6, 0xCE, 0xEE, 0x6B, 0xF3, 0xEB, 0x19, 0x11, 0x1E, 0x35, 0xAC,
  0x02, 0x8E, 0xEC, 0x66, 0x44, 0xC2, 0x63, 0x9F, 0xE0, 0x50, 0x4A, 0x2F, 0x7A, 0xDE, 0xDB, 0x8F,
  0xA3, 0xA1, 0xD5, 0x61, 0x6E, 0xA6, 0x9D, 0x84, 0x1C, 0xE2, 0x33, 0x92, 0x53, 0x36, 0x26, 0xB0,
  0x29, 0x60, 0xFA, 0xD3, 0x87, 0x9B, 0xCB, 0x9A, 0xE5, 0x0B, 0x56, 0x32, 0x59, 0x3E, 0x34, 0x6C,
  0xA7, 0xAF, 0x68, 0x7B, 0x31, 0x57, 0xCF, 0x74, 0xB7, 0xC1, 0xA0, 0x0E, 0xD1, 0x94, 0x0F, 0x55,
  0x24, 0xDD, 0x91, 0xD9, 0x70, 0x3C, 0x2A, 0xF2, 0xBB, 0xBE, 0x7D, 0x86, 0xD4, 0x48, 0x2B, 0x97,
};
#elif defined(KIKOKUGAI)
unsigned char REORDER_TABLE[256] = {
  0x21, 0xE1, 0xA0, 0x8D, 0x86, 0xF1, 0xE3, 0xE9, 0x00, 0xB6, 0x2D, 0xD7, 0x6A, 0x43, 0x93, 0xB0, 
  0xEC, 0x0A, 0xCF, 0x37, 0xB8, 0x3E, 0x9E, 0xF9, 0x9A, 0x4D, 0xC8, 0x7D, 0x5A, 0x77, 0x3A, 0x3D, 
  0x12, 0x27, 0x17, 0xCA, 0x89, 0x8F, 0x6C, 0x9C, 0x5F, 0x0F, 0x40, 0x64, 0xCD, 0x20, 0x3F, 0xFD, 
  0xB9, 0x73, 0xBE, 0x30, 0xEB, 0xAD, 0xB3, 0x10, 0xEE, 0x38, 0x7A, 0xFA, 0xD5, 0x4B, 0x5D, 0xB5, 
  0xE6, 0x91, 0xA5, 0xE7, 0xDA, 0xAA, 0x75, 0x0D, 0x3C, 0x9F, 0xF8, 0x7E, 0xB2, 0xA4, 0x62, 0xAB, 
  0xCB, 0x03, 0x6E, 0x18, 0xE5, 0x46, 0xC1, 0x4E, 0xFF, 0x63, 0x01, 0x97, 0xE2, 0x1A, 0x76, 0x65, 
  0x49, 0xCC, 0x1C, 0xBB, 0x09, 0x54, 0x58, 0xC9, 0x87, 0x05, 0xF2, 0x14, 0x52, 0xDC, 0x23, 0xF0, 
  0xDF, 0x7F, 0xED, 0x04, 0xAC, 0x16, 0xA8, 0x0E, 0x1F, 0xAE, 0xBA, 0x66, 0x6F, 0x5E, 0xD2, 0x96, 
  0xFE, 0x61, 0x69, 0xB7, 0x55, 0xA7, 0x45, 0x1D, 0xB1, 0x80, 0x2A, 0xC4, 0x70, 0x6D, 0xF5, 0x9D, 
  0xD4, 0xDE, 0x79, 0x74, 0x07, 0xC2, 0x2B, 0xA9, 0xBC, 0x25, 0x13, 0x5B, 0x15, 0x22, 0x06, 0x8C, 
  0x82, 0xF3, 0x29, 0x94, 0xA1, 0xA6, 0x7B, 0x9B, 0xD8, 0xA3, 0x98, 0x1E, 0x11, 0x1B, 0x35, 0x59, 
  0x02, 0xFB, 0x99, 0xD6, 0xB4, 0x72, 0xD3, 0x4C, 0x90, 0xC0, 0xBF, 0x2C, 0xEF, 0x8B, 0x88, 0xFC, 
  0x53, 0x51, 0x85, 0xD1, 0xDB, 0x56, 0x4A, 0xF4, 0x19, 0x92, 0x33, 0x42, 0xC3, 0x36, 0x26, 0x60, 
  0x2E, 0xD0, 0xAF, 0x83, 0xF7, 0x48, 0x78, 0x4F, 0x95, 0x08, 0xC6, 0x32, 0xCE, 0x3B, 0x34, 0xD9, 
  0x57, 0x5C, 0xDD, 0xE8, 0x31, 0xC7, 0x7C, 0xE4, 0x67, 0x71, 0x50, 0x0B, 0x81, 0x44, 0x0C, 0xC5, 
  0x24, 0x8A, 0x41, 0x8E, 0xE0, 0x39, 0x2F, 0xA2, 0x68, 0x6B, 0xEA, 0xF6, 0x84, 0xBD, 0x28, 0x47, 
};
#elif defined(SONICOMI)
unsigned char REORDER_TABLE[256] = {
  0x91, 0xD1, 0x10, 0xCB, 0xCF, 0xE1, 0xD6, 0xD5, 0x70, 0x2F, 0x9B, 0x63, 0xF8, 0x46, 0x06, 0x20, 
  0xDA, 0x78, 0x3D, 0xA3, 0x24, 0xAC, 0x0C, 0xE5, 0x08, 0x4B, 0x34, 0xBB, 0x58, 0xB3, 0xA8, 0xAB, 
  0x82, 0x93, 0x83, 0x38, 0xC5, 0xCD, 0xFA, 0x0A, 0x5D, 0x7D, 0x40, 0xF7, 0x3B, 0x90, 0xAD, 0xEB, 
  0x25, 0xB6, 0x2C, 0xA0, 0xD9, 0x1B, 0x26, 0x80, 0xDC, 0xA4, 0xB8, 0xE8, 0x6E, 0x49, 0x5B, 0x2E, 
  0xDF, 0x01, 0x1E, 0xD3, 0x68, 0x18, 0xBE, 0x7B, 0xAA, 0x0D, 0xE4, 0xBC, 0x22, 0x17, 0xF2, 0x19, 
  0x39, 0x76, 0xFC, 0x84, 0xDE, 0x4F, 0x31, 0x4C, 0xED, 0xF6, 0x71, 0x03, 0xD2, 0x88, 0xBF, 0xFE, 
  0x45, 0x3A, 0x8A, 0x29, 0x75, 0x57, 0x54, 0x35, 0xC3, 0x7E, 0xE2, 0x87, 0x52, 0x6A, 0x96, 0xE0, 
  0x6D, 0xBD, 0xDB, 0x77, 0x1A, 0x8F, 0x14, 0x7C, 0x8D, 0x1C, 0x28, 0xFF, 0xFD, 0x5C, 0x62, 0x0F, 
  0xEC, 0xF1, 0xF5, 0x23, 0x5E, 0x13, 0x4E, 0x8B, 0x21, 0xC0, 0x98, 0x37, 0xB0, 0xFB, 0xEE, 0x0B, 
  0x67, 0x6C, 0xB5, 0xB7, 0x73, 0x32, 0x99, 0x15, 0x2A, 0x9E, 0x86, 0x59, 0x8E, 0x92, 0x7F, 0xCA, 
  0xC2, 0xE6, 0x95, 0x07, 0x11, 0x1F, 0xB9, 0x09, 0x64, 0x16, 0x04, 0x8C, 0x81, 0x89, 0xAE, 0x55, 
  0x72, 0xE9, 0x05, 0x6F, 0x27, 0xB2, 0x66, 0x4A, 0x00, 0x30, 0x2D, 0x9A, 0xDD, 0xC9, 0xC4, 0xEA, 
  0x56, 0x51, 0xCE, 0x61, 0x69, 0x5F, 0x48, 0xE7, 0x85, 0x02, 0xA6, 0x42, 0x36, 0xAF, 0x9F, 0xF0, 
  0x9C, 0x60, 0x1D, 0xC6, 0xE3, 0x44, 0xB4, 0x4D, 0x0E, 0x74, 0x3F, 0xA2, 0x3C, 0xA9, 0xA7, 0x65, 
  0x53, 0x5A, 0x6B, 0xD4, 0xA1, 0x33, 0xBA, 0xD7, 0xF3, 0xB1, 0x50, 0x79, 0xC1, 0x47, 0x7A, 0x3E, 
  0x97, 0xC8, 0x41, 0xCC, 0xD0, 0xA5, 0x9D, 0x12, 0xF4, 0xF9, 0xD8, 0xEF, 0xC7, 0x2B, 0x94, 0x43, 
};
#elif defined (DMMD)
unsigned char REORDER_TABLE[256] = {
  0x71, 0x41, 0x80, 0xE5, 0xE9, 0x51, 0x4F, 0x4B, 0x00, 0x99, 0x75, 0x3A, 0xCC, 0xAF, 0xFF, 0x90, 
  0x44, 0x0C, 0x27, 0x6A, 0x9D, 0x66, 0xF6, 0x5B, 0xFC, 0xA5, 0x2D, 0xD5, 0xBC, 0xDA, 0x6C, 0x65, 
  0x12, 0x7A, 0x1A, 0x2C, 0xEB, 0xE7, 0xC4, 0xF4, 0xB7, 0x07, 0xA0, 0xC8, 0x25, 0x70, 0x67, 0x55, 
  0x9B, 0xDF, 0x96, 0x60, 0x43, 0x85, 0x9F, 0x10, 0x46, 0x6D, 0xDC, 0x5C, 0x3E, 0xA3, 0xB5, 0x9E, 
  0x49, 0xF1, 0x8E, 0x4A, 0x3C, 0x8C, 0xDE, 0x05, 0x64, 0xF7, 0x5D, 0xD6, 0x92, 0x88, 0xC2, 0x83, 
  0x23, 0x0F, 0xC6, 0x1D, 0x4E, 0xA9, 0x21, 0xA6, 0x57, 0xCF, 0x01, 0xFA, 0x42, 0x1C, 0xD9, 0xCE, 
  0xAB, 0x24, 0x14, 0x93, 0x0B, 0xB8, 0xBD, 0x2B, 0xEA, 0x0E, 0x52, 0x18, 0xB2, 0x34, 0x7F, 0x50, 
  0x37, 0xD7, 0x45, 0x08, 0x84, 0x19, 0x8D, 0x06, 0x17, 0x86, 0x9C, 0xC9, 0xC7, 0xB6, 0x32, 0xF9, 
  0x56, 0xC1, 0xCB, 0x9A, 0xBE, 0x8A, 0xAE, 0x15, 0x91, 0xE0, 0x7C, 0x28, 0xD0, 0xC5, 0x5E, 0xF5, 
  0x38, 0x36, 0xDB, 0xD8, 0x0A, 0x22, 0x73, 0x8B, 0x94, 0x7E, 0x1F, 0xB3, 0x1E, 0x72, 0x09, 0xE4, 
  0xE2, 0x5F, 0x7B, 0xF8, 0x81, 0x89, 0xD3, 0xF3, 0x3D, 0x8F, 0xFD, 0x16, 0x11, 0x13, 0x6E, 0xBB, 
  0x02, 0x53, 0xFB, 0x39, 0x98, 0xD2, 0x3F, 0xA4, 0xF0, 0x20, 0x97, 0x74, 0x47, 0xE3, 0xED, 0x54, 
  0xBF, 0xB1, 0xEE, 0x31, 0x33, 0xB9, 0xAC, 0x58, 0x1B, 0xF2, 0x6F, 0xA2, 0x2F, 0x69, 0x79, 0xC0, 
  0x76, 0x30, 0x87, 0xEF, 0x5A, 0xAD, 0xDD, 0xA7, 0xFE, 0x0D, 0x29, 0x62, 0x26, 0x63, 0x68, 0x3B, 
  0xBA, 0xB4, 0x35, 0x4D, 0x61, 0x2A, 0xD4, 0x48, 0xCA, 0xD1, 0xB0, 0x03, 0xE1, 0xA8, 0x04, 0x2E, 
  0x78, 0xEC, 0xA1, 0xE6, 0x40, 0x6B, 0x77, 0x82, 0xCD, 0xC3, 0x4C, 0x59, 0xE8, 0x95, 0x7D, 0xAA, 
};
#elif defined (GCLC)
unsigned char REORDER_TABLE[256] = {
  0xCC, 0x7C, 0xF3, 0xBD, 0xB5, 0x8C, 0x79, 0x70, 0x13, 0x95, 0xCD, 0x4E, 0xA1, 0x59, 0xD9, 0x93, 
  0x78, 0x11, 0x3B, 0xEE, 0x92, 0xEA, 0xDA, 0x80, 0xD1, 0x5D, 0x32, 0x0D, 0x61, 0x0E, 0xE1, 0xED, 
  0x26, 0xCE, 0x2E, 0x31, 0xB0, 0xBB, 0xA8, 0xD8, 0x6B, 0x1B, 0x53, 0xAF, 0x3D, 0xC3, 0xEB, 0x8D, 
  0x90, 0x09, 0x9A, 0xE3, 0x77, 0xFD, 0x99, 0x23, 0x7A, 0xE2, 0x01, 0x81, 0x44, 0x57, 0x6D, 0x94, 
  0x75, 0xDC, 0xF4, 0x7E, 0x41, 0xF1, 0x04, 0x1D, 0xE8, 0xDB, 0x82, 0x0A, 0x96, 0xFF, 0xA6, 0xF7, 
  0x37, 0x19, 0xAA, 0x22, 0x74, 0x55, 0x3C, 0x5A, 0x8B, 0xA9, 0x1C, 0xDE, 0x76, 0x21, 0x05, 0xA4, 
  0x50, 0x38, 0x28, 0x97, 0x10, 0x6F, 0x62, 0x30, 0xBE, 0x14, 0x86, 0x2F, 0x66, 0x48, 0xC9, 0x83, 
  0x4B, 0x0B, 0x7D, 0x1F, 0xF8, 0x25, 0xF2, 0x1A, 0x2B, 0xFA, 0x91, 0xA5, 0xAB, 0x6A, 0x46, 0xD5, 
  0x8A, 0xAC, 0xA0, 0x9E, 0x64, 0xFE, 0x54, 0x2D, 0x9C, 0xB3, 0xC1, 0x3F, 0x03, 0xAD, 0x84, 0xDD, 
  0x4F, 0x4A, 0x00, 0x0F, 0x1E, 0x36, 0xC7, 0xF0, 0x98, 0xC4, 0x29, 0x67, 0x24, 0xC6, 0x15, 0xB8, 
  0xB6, 0x89, 0xC0, 0xDF, 0xFC, 0xF5, 0x07, 0xD7, 0x42, 0xF9, 0xD2, 0x2A, 0x2C, 0x27, 0xE4, 0x60, 
  0x16, 0x87, 0xD0, 0x45, 0x9F, 0x06, 0x49, 0x58, 0xD3, 0x33, 0x9B, 0xC8, 0x7B, 0xB7, 0xB2, 0x88, 
  0x69, 0x6C, 0xB4, 0x4C, 0x47, 0x65, 0x51, 0x8F, 0x20, 0xD6, 0xE9, 0x56, 0x39, 0xE5, 0xC5, 0xA3, 
  0xCA, 0x43, 0xFB, 0xB9, 0x8E, 0x52, 0x02, 0x5B, 0xD4, 0x12, 0x35, 0xE6, 0x3A, 0xE7, 0xEF, 0x40, 
  0x6E, 0x68, 0x4D, 0x72, 0xEC, 0x3E, 0x08, 0x7F, 0xAE, 0x0C, 0x63, 0x17, 0xBC, 0x5F, 0x18, 0x34, 
  0xCF, 0xB1, 0x5C, 0xBA, 0x73, 0xE0, 0xCB, 0xF6, 0xA2, 0xA7, 0x71, 0x85, 0xBF, 0x9D, 0xC2, 0x5E, 
};
#else
unsigned char REORDER_TABLE[256] = {
  0xDF, 0x5F, 0x6E, 0xF7, 0xF5, 0xEF, 0x52, 0x5B, 0x7E, 0x25, 0xD7, 0x46, 0xBC, 0x92, 0x02, 0x2E, 
  0x51, 0x7C, 0x39, 0x16, 0x2A, 0x18, 0x08, 0xEB, 0x0C, 0x97, 0x3A, 0xC7, 0xAC, 0xC6, 0xB0, 0x17, 
  0x80, 0xD6, 0x86, 0x3C, 0xFB, 0xF9, 0xB1, 0x01, 0xA9, 0x79, 0x9E, 0xB3, 0x37, 0xDE, 0x19, 0xE7, 
  0x2B, 0xC2, 0x28, 0x1E, 0x5D, 0x67, 0x22, 0x8E, 0x58, 0x1A, 0xCC, 0xEC, 0x44, 0x9D, 0xA7, 0x24, 
  0x55, 0x0F, 0x64, 0x56, 0x4C, 0x6C, 0xC4, 0x77, 0x11, 0x09, 0xEA, 0xC8, 0x20, 0x63, 0x1C, 0x6D, 
  0x3D, 0x72, 0xB8, 0x8A, 0x54, 0x95, 0x3F, 0x98, 0xE9, 0xB2, 0x7F, 0x06, 0x50, 0x8C, 0xC5, 0xB4, 
  0x9B, 0x31, 0x81, 0x2D, 0x7B, 0xA3, 0x42, 0x3B, 0xF6, 0x74, 0xE0, 0x83, 0xA0, 0x41, 0xD2, 0xEE, 
  0x49, 0xC9, 0x57, 0x73, 0x61, 0x85, 0x6A, 0x78, 0x89, 0x68, 0x2C, 0xB5, 0xB9, 0xA8, 0x40, 0x05, 
  0xE8, 0xBF, 0xBB, 0x26, 0xA4, 0x66, 0x94, 0x87, 0x2F, 0xFE, 0xDC, 0x33, 0xCE, 0xB7, 0xE4, 0x07, 
  0x43, 0x48, 0xCB, 0xC3, 0x76, 0x30, 0xDD, 0x6B, 0x21, 0xD4, 0x82, 0xAD, 0x84, 0xD0, 0x75, 0xF1, 
  0xF0, 0xE2, 0xDB, 0x03, 0x6F, 0x65, 0xCD, 0x0D, 0x4A, 0x62, 0x0A, 0x88, 0x8F, 0x8D, 0x14, 0xAB, 
  0x70, 0xED, 0x0B, 0x45, 0x23, 0xC0, 0xAA, 0x91, 0x0E, 0x3E, 0x29, 0xD1, 0x59, 0xFD, 0xFA, 0xE1, 
  0xA2, 0xAF, 0xF4, 0x4F, 0x4D, 0xA5, 0x9C, 0xE3, 0x8B, 0x00, 0x12, 0x90, 0x32, 0x15, 0xD5, 0xBE, 
  0xD8, 0x4E, 0x69, 0xF2, 0xE6, 0x9A, 0xCA, 0x99, 0x04, 0x7A, 0x35, 0x10, 0x38, 0x1D, 0x13, 0x4B, 
  0xA6, 0xA1, 0x47, 0x5A, 0x1F, 0x36, 0xC1, 0x53, 0xB6, 0xCF, 0xAE, 0x7D, 0xFF, 0x93, 0x71, 0x34, 
  0xD3, 0xFC, 0x9F, 0xF8, 0x5E, 0x1B, 0xD9, 0x60, 0xBA, 0xBD, 0x5C, 0xE5, 0xF3, 0x27, 0xDA, 0x96, 
};
#endif

void unobfuscate(unsigned char* buff, unsigned long len, unsigned long key) {  
  for (unsigned long i = 0; i < len; i++) {
    buff[i]  = REORDER_TABLE[buff[i]];
    buff[i] -= (unsigned char) key;
#ifndef LAMENTO
    buff[i] -= (unsigned char) i;
#endif
  }
}

unsigned long generate_file_key(unsigned char* buff,
                                unsigned long  len,
                                unsigned long  data_length,
                                unsigned long  seed1,
                                unsigned long  seed2)
{
#if defined(AXANAEL) || defined(KIKOKUGAI) || defined(SONICOMI) || defined (DMMD) || defined(GCLC)
  unsigned long key = 0x20101118;
#else
  unsigned long key = 0x87654321;
#endif

  for (unsigned long i = 0; i < len; i++) {
    key -= buff[i];
  }

  key *= len;
#ifndef LAMENTO
  key += seed1 * seed2;
  key *= data_length;
#endif

  return key;
}

void unobfuscate_filename(unsigned char* buff, 
                          unsigned long  len, 
                          unsigned long  index,
                          unsigned long  seed1, 
                          unsigned long  seed2) 
{
  for (unsigned long i = 0; i < len; i++)  {
    unsigned char key     = (unsigned char)i * 0xFC;
#ifdef LAMENTO
    unsigned long mutator = seed1 + seed2;
#else
    unsigned long mutator = seed1 * seed2;
#endif

    key -= (unsigned char) (mutator >> 24);
    key -= (unsigned char) (mutator >> 16);
    key -= (unsigned char) (mutator >>  8);

#ifdef LAMENTO
    key -= (unsigned char)seed1 + (unsigned char)seed2;
#else
    key -= (unsigned char)seed1 * (unsigned char)seed2;
#endif

    key -= (unsigned char) (index >> 24);
    key -= (unsigned char) (index >> 16);
    key -= (unsigned char) (index >>  8);
    key -= (unsigned char) index;

    buff[i] += key;
  }
}

int main(int argc, char** argv) {
  if (argc != 2) {
    fprintf(stderr, "exnpa v1.31 by asmodean\n\n");
    fprintf(stderr, "usage: %s <input.npa>\n", argv[0]);
    return -1;
  }

  string in_filename(argv[1]);  

  int fd = as::open_or_die(in_filename, O_RDONLY | O_BINARY);

  NPAHDR hdr;
  read(fd, &hdr, sizeof(hdr));

  unsigned long  toc_len  = hdr.toc_length;
  unsigned char* toc_buff = new unsigned char[toc_len];
  read(fd, toc_buff, toc_len);

  unsigned char* p         = toc_buff;
  unsigned long  data_base = sizeof(hdr) + toc_len;

  for (unsigned long i = 0; i < hdr.entry_count; i++) {
    NPAENTRY1* entry1 = (NPAENTRY1*) p;  
    p += sizeof(*entry1);

    char filename[4096] = { 0 };
    memcpy(filename, p, entry1->filename_length);    
    p += entry1->filename_length;

    NPAENTRY2* entry2 = (NPAENTRY2*) p;
    p += sizeof(*entry2);    

    unobfuscate_filename((unsigned char*) filename, 
                         entry1->filename_length,
                         i,
                         hdr.seed1,
                         hdr.seed2);

    unsigned long key = generate_file_key((unsigned char*) filename, 
                                          entry1->filename_length,
                                          entry2->original_length,
                                          hdr.seed1,
                                          hdr.seed2);

    if (entry2->length) {
      unsigned long  len  = entry2->length;
      unsigned char* buff = new unsigned char[len];
      lseek(fd, data_base + entry2->offset, SEEK_SET);
      read(fd, buff, len);

#ifdef LAMENTO
      unsigned long unobfuscate_len = 0x1000;
#else
      unsigned long unobfuscate_len = 0x1000 + entry1->filename_length;
#endif

      if (unobfuscate_len > len) {
        unobfuscate_len = len;
      }

#ifndef CHNOAH
      unobfuscate(buff, unobfuscate_len, key);
#endif

      if (entry2->length != entry2->original_length) {
        unsigned long  temp_len  = entry2->original_length;
        unsigned char* temp_buff = new unsigned char[temp_len];
        uncompress(temp_buff, &temp_len, buff, len);

        delete [] buff;

        len  = temp_len;
        buff = temp_buff;
      }

      as::make_path(filename);

      if (len >= 4 && !memcmp(buff, "NPSI", 4)) {
        NPSIHDR* npsihdr = (NPSIHDR*) buff;

        as::write_bmp(as::get_file_prefix(filename) + ".bmp",
                      buff + sizeof(*npsihdr),
                      len  - sizeof(*npsihdr),
                      npsihdr->width,
                      npsihdr->height,
                      4,
                      as::WRITE_BMP_FLIP);
      } else {
        as::write_file(filename, buff, len);
      }

      delete [] buff;
    } else {
      // mkdir(filename);
    }

  }

  delete [] toc_buff;

  close(fd);

  return 0;
}
