// exef2paz, v1.22r4 2012/12/21
// coded by asmodean＆改造8pvc09vr11

// This tool extracts and rebuilds data from *.paz archives used by minori.

#include "as-util.h"
#include "blowfish.h" // common implementation
#include <algorithm>
#include <list>

#define CRYPTOPP_ENABLE_NAMESPACE_WEAK 1
#include "arc4.h"
#include "crc.h"
#include "zlib.h"

struct key_info_t {
  string        prefix;
  unsigned char toc_key[32];
  unsigned char dat_key[32];
};

struct crud_info_t {
  string png;
  string ogg;
  string sc;
  string avi; 
};

struct game_info_t {
  string        name;
  unsigned long version;
  key_info_t    keys[32];
  crud_info_t   crud;
};

static const game_info_t GAME_INFO[] = {
  { "ef - the latter tale",
    1,
    { { "bg",      { 0xE6, 0xA7, 0xAE, 0x27, 0xE2, 0x1C, 0x26, 0xCF, 0x31, 0x3A, 0x60, 0x59, 0x6C, 0x1B, 0xBF, 0x5A, 0x43, 0xC9, 0x45, 0x21, 0x30, 0x13, 0xB5, 0xC2, 0x55, 0x73, 0xB2, 0xE6, 0x65, 0x0A, 0x3B, 0x75, },
                   { 0x63, 0x03, 0x1E, 0xAA, 0x20, 0x90, 0x87, 0xB2, 0xC1, 0xBA, 0x73, 0xB7, 0x3A, 0x98, 0xDE, 0xCE, 0x00, 0xD3, 0x85, 0xF6, 0xB9, 0xD4, 0x70, 0xE9, 0x65, 0xBC, 0xF5, 0x9F, 0x1F, 0x27, 0x68, 0xE1, } },
      { "bgm",     { 0x04, 0x59, 0x6D, 0xCA, 0x97, 0xCC, 0x9F, 0xBF, 0xF1, 0xF0, 0x78, 0x46, 0xEF, 0x62, 0xB0, 0xC2, 0x38, 0xA1, 0x6F, 0x77, 0x4C, 0x5E, 0x82, 0x99, 0xCD, 0x5B, 0xA3, 0xD1, 0x60, 0xF9, 0x09, 0x66, },
                   { 0x8D, 0x7C, 0x89, 0x81, 0xB3, 0x04, 0x66, 0x6B, 0x0A, 0xF6, 0x1A, 0x33, 0xB0, 0x66, 0x51, 0x71, 0xA2, 0x26, 0x73, 0xFE, 0xEE, 0xF6, 0x94, 0x49, 0xC0, 0x3B, 0xDD, 0x0B, 0xF9, 0xC0, 0xD8, 0xA8, } },
      { "mov",     { 0x3E, 0x16, 0x01, 0x55, 0x67, 0x32, 0x1E, 0xB5, 0x66, 0x5B, 0x03, 0x12, 0xA6, 0x36, 0x89, 0x36, 0x96, 0x0D, 0x8F, 0xEB, 0x27, 0xEC, 0xB8, 0xC9, 0x2D, 0xDE, 0xBD, 0x2F, 0x45, 0xCA, 0x8E, 0xD1, }, 
                   { 0 }, },
      { "scr",     { 0xF9, 0x7F, 0xD5, 0xAD, 0x51, 0x5D, 0xD5, 0xC5, 0xD3, 0x58, 0xA6, 0x45, 0xA4, 0xB0, 0xB0, 0x75, 0x0D, 0x33, 0x3D, 0xDD, 0x7C, 0x0C, 0x61, 0x18, 0xDC, 0x05, 0x8C, 0x59, 0xBA, 0x27, 0xE5, 0xE5, },
                   { 0x2D, 0x20, 0xA3, 0xCD, 0x61, 0xB2, 0x39, 0x63, 0x35, 0x4C, 0xE8, 0x02, 0x43, 0x36, 0x83, 0xE5, 0xCA, 0xBB, 0x33, 0xB9, 0xCF, 0x1D, 0xD6, 0xD4, 0x0F, 0xFC, 0xA6, 0x1B, 0xD8, 0xF7, 0x55, 0x60, } },
      { "st",      { 0xF7, 0xAB, 0x69, 0x87, 0x2C, 0x19, 0xF3, 0x6D, 0xFE, 0x1F, 0x64, 0xB9, 0x69, 0x7F, 0x4B, 0xB0, 0x52, 0x66, 0xAA, 0x22, 0x04, 0x7D, 0x19, 0xB3, 0x03, 0x8F, 0x42, 0xEC, 0x03, 0xD9, 0x65, 0x1F, },
                   { 0x5E, 0x34, 0x2C, 0x08, 0x4A, 0x09, 0x37, 0xD1, 0x6F, 0xD8, 0x1F, 0xD3, 0x6F, 0x71, 0x8F, 0x39, 0x8B, 0xFF, 0xFC, 0xB9, 0x38, 0xDA, 0xD1, 0xC6, 0x19, 0x63, 0xFA, 0x26, 0xCE, 0xEA, 0x0A, 0xE2, } },
      { "sys",     { 0x21, 0x8C, 0x31, 0xBC, 0xC6, 0x2B, 0xAC, 0xF2, 0x47, 0xF7, 0xAE, 0x1C, 0xF1, 0x50, 0x78, 0x7D, 0xF6, 0xC0, 0xDA, 0xFA, 0xD2, 0x60, 0x9A, 0xAA, 0xAF, 0x37, 0xEA, 0xAC, 0x2F, 0x25, 0x1B, 0x3D, },
                   { 0x86, 0x79, 0x89, 0x7A, 0x71, 0x50, 0x5E, 0x3D, 0x62, 0x33, 0x7B, 0xEA, 0x5D, 0xFA, 0x0D, 0x2F, 0xA8, 0xDD, 0xA9, 0x4C, 0xCC, 0x70, 0x13, 0xBF, 0x10, 0xA1, 0xC0, 0x48, 0xC5, 0xF4, 0x7F, 0xE4, } },
      { "voice",   { 0x00, 0x6B, 0x02, 0x08, 0xBB, 0xBE, 0xF3, 0x35, 0x01, 0xC1, 0xAA, 0xFF, 0xE9, 0x2C, 0xDA, 0xCE, 0x2F, 0xD4, 0x90, 0x59, 0x02, 0xF3, 0x48, 0x3C, 0xB3, 0x5E, 0x9D, 0x69, 0x92, 0x13, 0x1E, 0xD9, },
                   { 0x83, 0x5F, 0xD5, 0x1E, 0xC4, 0xEB, 0xC3, 0xD3, 0xF0, 0x84, 0xDE, 0x5C, 0x8D, 0x97, 0xFB, 0xB6, 0x60, 0xE8, 0x60, 0xC4, 0x0B, 0x7D, 0x16, 0x7B, 0xDE, 0x52, 0x65, 0xC5, 0x9D, 0x11, 0x08, 0x51, }, },
      { "",        { 0 }, { 0 } }, },
    { "957277W1", "m24lX440", "A00U43Mj", "8fO1Xj6g" }, },

  { "eden*",
    1,
    { { "bg",      { 0x38, 0xF8, 0x84, 0x76, 0x98, 0xDA, 0x5E, 0x9C, 0x4A, 0xCD, 0x77, 0xB4, 0x87, 0x9B, 0x88, 0xEE, 0x99, 0xAE, 0xED, 0xCC, 0xBE, 0x0A, 0x16, 0xEF, 0xFC, 0x79, 0x60, 0x3B, 0x69, 0x3E, 0xDE, 0xF8, },
                   { 0xF0, 0x89, 0xC8, 0xD6, 0xAB, 0x97, 0xA3, 0xFC, 0xB9, 0x25, 0xD6, 0xD2, 0x9F, 0x7B, 0x30, 0xD0, 0x91, 0x1C, 0xAF, 0x9F, 0x03, 0x49, 0x6D, 0xFA, 0xA6, 0x3F, 0x7B, 0x1F, 0xF2, 0xC0, 0x72, 0x77, } },
      { "bgm",     { 0x06, 0x75, 0x07, 0x00, 0x68, 0xC0, 0xF2, 0x9B, 0xFB, 0x9A, 0x0E, 0xD6, 0xA1, 0x94, 0x74, 0x23, 0xDF, 0x15, 0xD6, 0x58, 0x38, 0xFE, 0x57, 0x1F, 0x0F, 0xC6, 0x9F, 0x20, 0xCF, 0xC2, 0x43, 0x89, },
                   { 0xDD, 0xB8, 0xEA, 0x2E, 0x30, 0x9D, 0x12, 0x28, 0xDD, 0x76, 0x8E, 0x47, 0x06, 0xB8, 0x4D, 0x61, 0x7A, 0x09, 0xDF, 0x2C, 0xB6, 0x56, 0x09, 0x3F, 0x53, 0xB0, 0x11, 0xF5, 0x01, 0xFD, 0x4B, 0xA8, } },
      { "mov",     { 0x98, 0x89, 0xC2, 0x54, 0xF8, 0xF7, 0x9D, 0xBE, 0x3A, 0x57, 0x13, 0x6B, 0x7C, 0xB1, 0x91, 0x3F, 0x96, 0xF1, 0x39, 0xD1, 0xF0, 0x18, 0x82, 0xEC, 0x50, 0x2D, 0x0B, 0x5F, 0xE4, 0x5F, 0xB2, 0x85, }, 
                   { 0 }, },
      { "scr",     { 0x07, 0x96, 0x6B, 0xB6, 0xF5, 0x45, 0x10, 0x29, 0x34, 0x8F, 0x07, 0x90, 0x0C, 0x53, 0x7D, 0x8F, 0xFB, 0x39, 0x77, 0xE6, 0xBE, 0x85, 0x25, 0xD2, 0xB9, 0xD9, 0x72, 0xB5, 0x54, 0xA7, 0x6E, 0x38, },
                   { 0x29, 0x5C, 0x0C, 0x5E, 0x37, 0x6E, 0x03, 0x16, 0x79, 0x24, 0x2F, 0x53, 0xEB, 0xC2, 0xA0, 0xBD, 0x54, 0x3A, 0x9D, 0x91, 0x35, 0x8A, 0xC0, 0xB7, 0x26, 0xEF, 0xBA, 0xDC, 0x23, 0x39, 0x7A, 0x7F, } },
      { "se",      { 0xA8, 0xD2, 0x0B, 0x2A, 0x12, 0xA1, 0x15, 0x51, 0xF4, 0x9E, 0x28, 0xFC, 0x81, 0x84, 0xC6, 0x91, 0x3F, 0x25, 0x47, 0x01, 0xFE, 0xFF, 0x6F, 0x60, 0x9E, 0x3E, 0x4A, 0x40, 0x00, 0x1E, 0xF2, 0xF5, },
                   { 0x05, 0x64, 0x21, 0xB5, 0x03, 0xC3, 0x1A, 0x0F, 0x13, 0xFC, 0xCF, 0xB4, 0x5D, 0xE1, 0x86, 0x29, 0x8D, 0x0B, 0xC7, 0xB3, 0xF6, 0xA2, 0xD4, 0xBE, 0x6D, 0x81, 0xEA, 0xB2, 0x1C, 0xD4, 0x85, 0x1B, } },
      { "sys",     { 0x09, 0xFB, 0x84, 0x25, 0x8F, 0xE8, 0x1A, 0x9B, 0x25, 0xDB, 0xED, 0xA0, 0xC0, 0x22, 0x75, 0x24, 0x1C, 0xAA, 0xAB, 0xFF, 0x3F, 0xF1, 0xCA, 0xB8, 0x0B, 0x98, 0x11, 0xF2, 0xAD, 0xE9, 0xC7, 0xDF, },
                   { 0x35, 0x1A, 0x6B, 0x31, 0xBA, 0xA2, 0x94, 0xAA, 0xF2, 0x5D, 0x19, 0xD1, 0xEA, 0x22, 0x1C, 0x73, 0x57, 0xCB, 0xD4, 0x4F, 0x77, 0x8E, 0x85, 0x36, 0x73, 0x49, 0xB6, 0x60, 0x64, 0x13, 0xB2, 0x77, } },
      { "voice",   { 0xF6, 0x03, 0x94, 0x02, 0x92, 0x35, 0xE0, 0x43, 0x04, 0xBE, 0x0E, 0xA6, 0xD4, 0x69, 0xA6, 0x35, 0x61, 0xDE, 0x0E, 0x72, 0x30, 0x00, 0xC4, 0x1C, 0x17, 0x70, 0xF7, 0x2A, 0x5D, 0x23, 0x32, 0x76, },
                   { 0xDD, 0x35, 0x1A, 0x6C, 0xBA, 0x97, 0x64, 0x9D, 0x1E, 0x47, 0xEE, 0x44, 0x89, 0x73, 0x39, 0x16, 0x97, 0xBF, 0x07, 0x7E, 0x86, 0xA3, 0x3E, 0xC3, 0xD3, 0x26, 0x6C, 0xC0, 0xFA, 0x75, 0x38, 0x68, } },
      { "pmbg",    { 0x38, 0x0D, 0x61, 0x9A, 0x1A, 0x22, 0x8B, 0x7A, 0x75, 0xA5, 0xBC, 0x13, 0xF3, 0xE9, 0xA1, 0x9E, 0xEF, 0xB7, 0x44, 0x83, 0x99, 0xEA, 0x11, 0xDA, 0x14, 0xED, 0xAA, 0x71, 0x97, 0x5F, 0xF6, 0x86, },
                   { 0xF5, 0xD2, 0xAA, 0xF0, 0xE9, 0xD6, 0xD5, 0x50, 0x7D, 0x08, 0x26, 0x6D, 0x70, 0x90, 0xA4, 0x67, 0x7A, 0x19, 0x1E, 0x04, 0x39, 0x01, 0x2B, 0x7F, 0xE3, 0xE3, 0xFD, 0xBB, 0xDB, 0x99, 0x05, 0xD6, }, },
      { "pmbgm",   { 0x99, 0x24, 0x1A, 0xD9, 0x33, 0xAF, 0xB0, 0xD7, 0x79, 0x5A, 0xAB, 0xAA, 0x25, 0x78, 0x6F, 0xF9, 0x95, 0xD0, 0xE7, 0xE4, 0xC2, 0xA2, 0xFC, 0x62, 0xDC, 0x84, 0xC1, 0x26, 0x59, 0x00, 0x00, 0x20, }, 
                   { 0x7f, 0x73, 0xe1, 0x19, 0x50, 0x87, 0x36, 0x22, 0x89, 0xb0, 0xf8, 0x47, 0xb9, 0xfd, 0xb7, 0x9f, 0x65, 0x0e, 0xe5, 0x31, 0x1e, 0x00, 0x1d, 0x1b, 0xa8, 0xff, 0x1f, 0x47, 0x0f, 0x3f, 0x7d, 0x3e, }, },
      { "pmscr",   { 0x3A, 0x49, 0xB4, 0xFF, 0xD0, 0x4F, 0xE9, 0x68, 0xB0, 0xCC, 0xAF, 0xD2, 0x7D, 0x76, 0x20, 0x2A, 0xA6, 0x5C, 0xE9, 0x99, 0xE4, 0x7C, 0xE1, 0x99, 0xA7, 0x57, 0x5D, 0x6B, 0x6E, 0xED, 0xFD, 0x83, }, 
                   { 0xC8, 0x38, 0x0C, 0x87, 0x4A, 0xD5, 0x68, 0x97, 0x61, 0x67, 0x7A, 0xA1, 0xD9, 0x23, 0x0E, 0x90, 0x70, 0xE0, 0xD5, 0xEC, 0x61, 0xE2, 0x5D, 0x16, 0xE5, 0xE7, 0xF2, 0x9C, 0xB8, 0x88, 0xBB, 0xCD, }, },
      { "pmse",    { 0x43, 0x19, 0x35, 0xBE, 0xC0, 0x1A, 0xBA, 0x0D, 0xA6, 0x38, 0xCE, 0x97, 0x13, 0x70, 0xED, 0x92, 0x9D, 0xB3, 0x19, 0x8A, 0x37, 0x9A, 0xAD, 0x5A, 0xF3, 0x38, 0x0D, 0x50, 0x44, 0x50, 0x14, 0xFF, }, 
                   { 0x95, 0x3f, 0x55, 0x44, 0x8b, 0x2e, 0x7b, 0x10, 0x3f, 0x3d, 0xfa, 0x45, 0x6f, 0x94, 0x00, 0x07, 0xa7, 0x2d, 0xb8, 0x3e, 0xb2, 0xa2, 0xec, 0xd8, 0x38, 0x7a, 0xb9, 0x1a, 0xa4, 0x32, 0x35, 0x2a, }, },
      { "pmsys",   { 0xE1, 0x4E, 0x51, 0x51, 0xEA, 0x3C, 0xDE, 0x11, 0x74, 0xF6, 0x3A, 0x33, 0x5C, 0x81, 0x5D, 0x27, 0xCB, 0x99, 0x9C, 0xBF, 0xC6, 0xD9, 0x5C, 0xAB, 0xDC, 0x38, 0x9B, 0x4A, 0xF3, 0x40, 0xE7, 0x73, }, 
                   { 0xE4, 0x46, 0x83, 0x5B, 0xFB, 0x04, 0x10, 0x59, 0x6D, 0xF5, 0x76, 0x9A, 0xBF, 0xBC, 0x07, 0x68, 0xE8, 0xC1, 0x50, 0xEF, 0x2E, 0xF8, 0x79, 0x5C, 0x21, 0x13, 0x7F, 0xDC, 0x33, 0xE9, 0xE6, 0xBA, }, },
      { "pmvoice", { 0x28, 0x5D, 0x2A, 0x2F, 0xF7, 0x25, 0x4B, 0xDC, 0xAE, 0x0F, 0xC2, 0x2C, 0xE7, 0x3D, 0xC4, 0x4D, 0x58, 0x5C, 0xE0, 0x89, 0xE3, 0x81, 0x10, 0x3D, 0xC4, 0x03, 0xEB, 0x90, 0xD6, 0x53, 0x5D, 0x99, }, 
                   { 0x85, 0x97, 0x40, 0xf4, 0x95, 0x48, 0x04, 0x94, 0xca, 0x8f, 0xbb, 0x71, 0xa6, 0x5f, 0xd0, 0x78, 0xe0, 0x1a, 0xcc, 0x2a, 0x21, 0xea, 0x2f, 0xf6, 0xd3, 0xd8, 0x18, 0x7b, 0x2f, 0x63, 0x94, 0xf5, }, },
      { "",        { 0 }, { 0 } }, },
    { "p37j344s", "ol0lOrAf", "N426Fd94", "Uyiu4Ruy" }, },

  { "ましろ色シンフォニー",
    1,
    { { "bg",      { 0x26, 0x0C, 0x3A, 0x4A, 0x0A, 0xCA, 0x20, 0xE3, 0x94, 0xFF, 0xF6, 0x2C, 0xF3, 0x43, 0xA4, 0x3C, 0x0A, 0xE2, 0xD9, 0x03, 0x62, 0xC6, 0xE4, 0xB8, 0xBC, 0x78, 0x04, 0xBC, 0xEA, 0xC2, 0x72, 0x9F, },
                   { 0x80, 0xD2, 0x43, 0x0B, 0xEB, 0xBF, 0x41, 0x1C, 0x27, 0x77, 0xF1, 0xF5, 0xE0, 0x4D, 0x86, 0x32, 0xBC, 0xD8, 0x88, 0x56, 0xD2, 0x65, 0x65, 0x7D, 0xB0, 0xC5, 0xB7, 0xA8, 0x04, 0xD9, 0x66, 0xC5, } },
      { "bgm",     { 0xA7, 0x46, 0x3B, 0x2A, 0x85, 0x57, 0xC3, 0x82, 0xA8, 0x4F, 0xDC, 0xBD, 0x50, 0x63, 0xC1, 0x72, 0x6A, 0x0D, 0xFF, 0x7E, 0x79, 0x35, 0x69, 0x5D, 0xA8, 0xE4, 0x23, 0x3B, 0x8F, 0x56, 0xA2, 0xEA, },
                   { 0x42, 0x38, 0x0d, 0x51, 0x11, 0xe7, 0x82, 0x08, 0xe1, 0x47, 0x8c, 0x0a, 0x3f, 0x8f, 0xc5, 0x69, 0x4a, 0xfe, 0x21, 0x80, 0x43, 0xf3, 0xa2, 0x9e, 0x13, 0xd0, 0x84, 0xd5, 0x6b, 0x53, 0x82, 0x8e, } },
      { "mov",     { 0x7E, 0xE1, 0x70, 0x06, 0x09, 0x98, 0x36, 0x50, 0xD0, 0xAE, 0xD4, 0x87, 0x1E, 0xC9, 0x23, 0xEC, 0xA4, 0x72, 0x0B, 0x63, 0xCF, 0x2E, 0xD0, 0x10, 0xE3, 0xF6, 0x7C, 0x56, 0x5A, 0xD9, 0x48, 0x2F, },
                   { 0 } },
      { "scr",     { 0xF4, 0x23, 0xA8, 0xC4, 0xA3, 0x22, 0xF6, 0xFD, 0xF9, 0x76, 0xC3, 0x46, 0x74, 0xB6, 0x34, 0xE7, 0x75, 0x80, 0x2D, 0x38, 0x2C, 0x06, 0xAA, 0x10, 0x85, 0xDC, 0xCF, 0x0C, 0xE9, 0x87, 0xE6, 0xEE, },
                   { 0x85, 0xA5, 0x2B, 0xBA, 0xCF, 0x89, 0x3D, 0xA5, 0xB1, 0xDA, 0x1A, 0x24, 0xA1, 0xD4, 0x58, 0x24, 0x3F, 0x48, 0x54, 0xED, 0xEC, 0xB2, 0xC4, 0xAF, 0xDE, 0xCD, 0xD9, 0x66, 0xB7, 0x51, 0xB4, 0x2A, } },
      { "se",      { 0x62, 0x45, 0xDF, 0xE9, 0x78, 0x0F, 0xAE, 0xDA, 0x20, 0xCA, 0xE8, 0xC2, 0xF2, 0x1B, 0xDF, 0x1A, 0x50, 0xDB, 0x0F, 0xE4, 0x2C, 0xEC, 0x1C, 0xCB, 0x10, 0x0A, 0x83, 0x7B, 0xE9, 0xE5, 0x19, 0x79, },
                   { 0x43, 0x84, 0x86, 0xc5, 0x65, 0x53, 0x0b, 0xb2, 0x50, 0xee, 0xc8, 0xa6, 0x4c, 0xcd, 0xc9, 0x17, 0xe5, 0x05, 0x2d, 0xa3, 0xae, 0xbd, 0xc9, 0xdc, 0x0c, 0x69, 0x1b, 0x04, 0xe9, 0x93, 0x61, 0x5c, } },
      { "st",      { 0x65, 0x20, 0x30, 0xA3, 0x50, 0xE7, 0xAE, 0x1F, 0x5D, 0xDD, 0x8A, 0x89, 0x8B, 0xEC, 0xD4, 0x90, 0x8E, 0xFD, 0x22, 0x76, 0x6B, 0x48, 0x3B, 0x8E, 0x81, 0x4E, 0x48, 0x97, 0x7D, 0xB1, 0xF9, 0x0B, },
                   { 0x0D, 0xAA, 0x7A, 0x9E, 0xCD, 0xA1, 0xE6, 0x02, 0x92, 0x12, 0xE1, 0xD1, 0x9C, 0xD6, 0x3C, 0xCE, 0xB3, 0x5F, 0x96, 0x13, 0xF7, 0x9D, 0xF6, 0xD1, 0x3D, 0x60, 0x79, 0xC3, 0x88, 0x21, 0x0B, 0xF0, } },
      { "sys",     { 0xAC, 0x44, 0x67, 0x8A, 0x3C, 0x93, 0xF6, 0xC9, 0x79, 0xDF, 0x29, 0xEC, 0x84, 0x52, 0x4A, 0x2C, 0xC2, 0x91, 0x9F, 0x89, 0xC0, 0xEB, 0xD5, 0x7F, 0x2C, 0x60, 0xF1, 0x02, 0xC0, 0x59, 0x65, 0xE1, },
                   { 0x7A, 0x1D, 0x0B, 0xBE, 0xA0, 0x17, 0x4E, 0x5E, 0xD3, 0xDF, 0xAD, 0x9D, 0x05, 0xAB, 0x1B, 0xAB, 0x68, 0x7C, 0x7A, 0x1A, 0x07, 0x9A, 0xE6, 0x5F, 0x98, 0xBF, 0xC7, 0x3B, 0xD3, 0x04, 0xF1, 0xBB, } },
      { "voice",   { 0xE8, 0xF1, 0x93, 0x09, 0x94, 0x47, 0x00, 0x8C, 0x77, 0xB4, 0x3B, 0xBA, 0x74, 0xE4, 0xF5, 0x63, 0xB7, 0x39, 0x2E, 0x67, 0x21, 0xD6, 0x8D, 0x16, 0x28, 0xE0, 0x51, 0x99, 0x6F, 0x97, 0x80, 0x98, },
                   { 0x40, 0xa0, 0x21, 0x09, 0xb3, 0xb4, 0xf7, 0x4d, 0xc4, 0x1a, 0xf9, 0xad, 0xc3, 0x03, 0x28, 0xd2, 0xcd, 0x61, 0xb7, 0x9a, 0xe2, 0x65, 0xf5, 0x0a, 0x4e, 0x9c, 0xe8, 0xc2, 0x3c, 0xc8, 0x96, 0x25, } }, },
    { "hFx1Bh93", "cQ5jhgpb", "rytKRa38", "ChFdc6iA" }, },

  { "Riddle Garden",
    1,
    { { "bg",      { 0xAD, 0x91, 0xD2, 0x43, 0x20, 0xBC, 0xF0, 0x9F, 0xF6, 0xA1, 0xB5, 0x72, 0xB2, 0xF7, 0x3E, 0x4F, 0x7A, 0xFD, 0xDC, 0xDE, 0xD9, 0xA9, 0xCB, 0xDC, 0xAB, 0x27, 0x8B, 0xDC, 0x96, 0x29, 0xA4, 0x90, },
                   { 0x5E, 0x2D, 0x3B, 0xB7, 0xC6, 0xCC, 0xEC, 0xF9, 0xEE, 0x90, 0x38, 0x1E, 0xD7, 0x56, 0x27, 0xDC, 0x7E, 0xE0, 0xCC, 0x0E, 0xC2, 0x83, 0x8F, 0x25, 0xC3, 0x91, 0x32, 0xEE, 0xD1, 0x95, 0x59, 0x95, } },
      { "bgm",     { 0xE6, 0xB8, 0x93, 0x5B, 0x1B, 0xBD, 0x1C, 0xAD, 0xC5, 0x4E, 0x5C, 0x33, 0x4F, 0xCE, 0x37, 0xFC, 0xA7, 0x89, 0x08, 0xCF, 0x78, 0x68, 0xA8, 0x8F, 0x34, 0x28, 0x91, 0x78, 0x94, 0x8C, 0xFC, 0xC7, },
                   { 0x05, 0x6B, 0xEC, 0xAE, 0x52, 0x74, 0x2E, 0x97, 0xF0, 0xBB, 0x93, 0x45, 0x84, 0x02, 0xCF, 0x7A, 0x1E, 0xEE, 0x12, 0x90, 0x75, 0xAC, 0x89, 0x51, 0x39, 0x63, 0x2E, 0x4B, 0x1A, 0x00, 0x3A, 0xB1, } },
      { "mov",     { 0x1F, 0x06, 0x2C, 0x14, 0xEF, 0x03, 0x07, 0x2D, 0x5A, 0xA3, 0x20, 0x8B, 0x58, 0x9E, 0x9C, 0xF5, 0x90, 0x0C, 0xDB, 0xDC, 0x09, 0x67, 0xE2, 0xBB, 0xAA, 0x80, 0x52, 0x82, 0xAA, 0xD6, 0x1C, 0x4A, },
                   { 0 } },
      { "scr",     { 0xDA, 0xA5, 0x12, 0x91, 0xC3, 0x88, 0xD8, 0xDC, 0x25, 0xA5, 0x5A, 0xDC, 0x44, 0x88, 0x14, 0x7E, 0xC4, 0x6F, 0x44, 0x3A, 0x83, 0xA8, 0x8C, 0x6A, 0x5B, 0xBD, 0xBB, 0x22, 0xA7, 0x2C, 0x40, 0xCD, },
                   { 0xCB, 0x9E, 0x67, 0xBE, 0x5A, 0x80, 0x86, 0x0B, 0x4C, 0x03, 0x5A, 0x4A, 0x03, 0xCA, 0x65, 0xA6, 0x71, 0x8A, 0xB6, 0xDD, 0x0A, 0x38, 0x7C, 0x13, 0x57, 0x34, 0xBB, 0xAC, 0x32, 0x1F, 0x73, 0x09, } },
      { "se",      { 0x44, 0xDD, 0x9D, 0xDA, 0xCC, 0x00, 0x42, 0x79, 0x32, 0xBC, 0x34, 0x15, 0x99, 0x45, 0x59, 0x41, 0x32, 0xDD, 0x22, 0xD1, 0xD4, 0xA1, 0xAD, 0xAD, 0x71, 0xF1, 0x97, 0xC9, 0x1B, 0x86, 0xA5, 0xD1, },
                   { 0x62, 0x1D, 0xDB, 0x75, 0xD5, 0x57, 0xA7, 0x6E, 0x7E, 0x89, 0xF4, 0x93, 0x29, 0x93, 0x1D, 0xD7, 0xC6, 0x3E, 0xF1, 0xEC, 0x13, 0x7F, 0xCD, 0x2A, 0x4E, 0xE9, 0x5F, 0x06, 0x9D, 0xA2, 0x7F, 0x53, } },
      { "st",      { 0xBB, 0xB7, 0x46, 0x7F, 0xD8, 0xCF, 0xD4, 0x1B, 0x9A, 0xAA, 0x90, 0x0D, 0x79, 0xDF, 0xE4, 0x49, 0x32, 0x41, 0x5C, 0x2D, 0x4F, 0x97, 0xE1, 0xF0, 0xEA, 0x28, 0xE7, 0x6A, 0xC5, 0x5B, 0x03, 0x1D, },
                   { 0x2B, 0xED, 0x83, 0xE9, 0x11, 0xF7, 0x1E, 0x80, 0x32, 0x56, 0xEC, 0x12, 0xB7, 0xD9, 0x27, 0xED, 0x87, 0x9C, 0x74, 0x73, 0x24, 0x49, 0xD3, 0x94, 0x16, 0xB8, 0x8C, 0x22, 0xCD, 0x8D, 0x3E, 0x8D, } },
      { "sys",     { 0x71, 0x05, 0x61, 0xA8, 0x9A, 0x2F, 0xA3, 0x61, 0xEC, 0xE1, 0xDA, 0xDA, 0x9E, 0xD3, 0x58, 0x45, 0x02, 0x94, 0x29, 0x10, 0x7B, 0x70, 0xBB, 0x00, 0xD3, 0x2E, 0x8D, 0x2B, 0xB5, 0x33, 0x5E, 0x87, },
                   { 0xB9, 0x29, 0xD3, 0xAB, 0x21, 0xFB, 0xA1, 0x6A, 0xF1, 0xFC, 0x80, 0x71, 0xE6, 0x85, 0x27, 0x06, 0x48, 0xB9, 0x23, 0xA7, 0x85, 0xB4, 0x26, 0xDC, 0xAA, 0xE6, 0xEA, 0xE5, 0x78, 0xF0, 0x9B, 0xFD, } },
      { "voice",   { 0x54, 0x1A, 0x41, 0x7E, 0x25, 0x32, 0xDA, 0xE5, 0xE6, 0x93, 0x55, 0x03, 0xFC, 0x45, 0x8F, 0xB4, 0xD9, 0x81, 0xDE, 0x3C, 0x4C, 0xA0, 0x1D, 0x0B, 0xBA, 0xD5, 0xB2, 0x3E, 0x75, 0xD5, 0x5E, 0x87, },
                   { 0x94, 0xFB, 0x35, 0x42, 0x44, 0xD0, 0xA4, 0xDB, 0x73, 0x71, 0x23, 0xAB, 0x73, 0x88, 0x61, 0x8D, 0xF3, 0x14, 0xC0, 0x79, 0x60, 0x67, 0xDB, 0xD6, 0xB9, 0x6F, 0x36, 0x6C, 0x3D, 0xD1, 0x98, 0x92, } }, },
    { "kaKMLi3_", "POJksI0a", "AOeicjid", "jaoim39m" }, },

  { "すてぃ〜るMyはぁと",
    1,
    { { "bg",      { 0x05, 0x56, 0xA8, 0xB6, 0x7B, 0x15, 0x57, 0x42, 0x8E, 0x81, 0xD6, 0x7B, 0x40, 0x8A, 0x9B, 0xE1, 0x85, 0x88, 0x30, 0xEE, 0xF4, 0x23, 0x18, 0x20, 0xC1, 0x06, 0xEA, 0x1C, 0x47, 0x8E, 0x66, 0x28, },
                   { 0x87, 0x2D, 0x01, 0xC8, 0xB9, 0x7B, 0x7C, 0x58, 0xA1, 0x43, 0xD0, 0x0E, 0x64, 0x25, 0xE9, 0xD2, 0xC2, 0xC8, 0x04, 0x02, 0xF0, 0xC3, 0x19, 0xBE, 0x24, 0x0C, 0x82, 0xA5, 0x45, 0x2D, 0x0D, 0x5D, } },
      { "bgm",     { 0x18, 0x93, 0xCA, 0xDF, 0x06, 0x2E, 0x6C, 0xC7, 0x2C, 0x17, 0xFA, 0xA4, 0x88, 0x3B, 0xBE, 0x38, 0xC8, 0x32, 0x5E, 0xC0, 0xF2, 0xE4, 0xA6, 0x85, 0x9B, 0x9C, 0xE3, 0x44, 0x3A, 0xDD, 0xB8, 0xF1, },
                   { 0x88, 0x22, 0xA2, 0x3D, 0x96, 0x2B, 0x7D, 0x7A, 0xEB, 0x97, 0xFD, 0xDA, 0x44, 0x75, 0x64, 0x15, 0x78, 0x82, 0x4E, 0xC8, 0xA3, 0x18, 0xBB, 0xC4, 0x94, 0x94, 0x42, 0x37, 0xB7, 0x96, 0xB5, 0xB2, } },
      { "mov",     { 0xA6, 0x4A, 0x3C, 0xA9, 0xE4, 0xB3, 0xD2, 0xF3, 0x0D, 0xE6, 0x79, 0xF4, 0xBB, 0xD0, 0xA8, 0xFC, 0xBB, 0x4C, 0xD9, 0xD0, 0x7C, 0xDD, 0x01, 0xCC, 0x04, 0xBD, 0x5E, 0xFC, 0xAC, 0xD6, 0x49, 0x9E, },
                   { 0 } },
      { "scr",     { 0xEF, 0x34, 0xD7, 0xA1, 0x59, 0x5C, 0xC5, 0x9E, 0x4D, 0x64, 0xA3, 0xAA, 0xA6, 0xEC, 0x68, 0xEA, 0xCE, 0x38, 0x4E, 0x17, 0xB3, 0xDA, 0x41, 0xF8, 0x6C, 0x18, 0xD7, 0x27, 0xD7, 0x38, 0x9D, 0x94, },
                   { 0x64, 0xF4, 0x0E, 0x83, 0x2C, 0x64, 0x76, 0x86, 0x86, 0x44, 0x14, 0x9D, 0x79, 0xAB, 0x98, 0x5F, 0x29, 0x0B, 0x6F, 0x81, 0xE3, 0x33, 0x95, 0x3D, 0xFF, 0x9A, 0x97, 0xEF, 0x95, 0x58, 0x47, 0xC4, } },
      { "se",      { 0xEA, 0x7C, 0x4C, 0xD9, 0xC8, 0x7C, 0xFA, 0xEF, 0x05, 0x59, 0x7C, 0x90, 0xD5, 0xEB, 0x28, 0x7A, 0xF6, 0xFE, 0xB8, 0xD0, 0x55, 0x04, 0xAF, 0xD7, 0xE0, 0x7E, 0x27, 0x5B, 0x93, 0xC3, 0x02, 0x8C, },
                   { 0x88, 0x5D, 0x8F, 0x82, 0xBA, 0x49, 0x3F, 0x58, 0xB4, 0x61, 0x13, 0x16, 0x25, 0x11, 0x14, 0x45, 0x3A, 0xEC, 0x95, 0x2F, 0xE6, 0x9F, 0xB0, 0xE8, 0x92, 0x9A, 0xEF, 0x41, 0xB9, 0x80, 0x95, 0xF1, } },
      { "st",      { 0x21, 0x9E, 0xE0, 0xD6, 0x4A, 0x54, 0xA9, 0x15, 0x88, 0x2C, 0xF9, 0x1E, 0xAD, 0x57, 0x66, 0x5A, 0x96, 0x8C, 0x47, 0x77, 0xCA, 0x73, 0xCB, 0xE2, 0xF6, 0x5A, 0xCE, 0x32, 0x31, 0x84, 0xF5, 0x79, },
                   { 0x5C, 0x11, 0x23, 0x26, 0xF4, 0xC3, 0xDE, 0x11, 0x08, 0x69, 0xAA, 0x93, 0x23, 0x6B, 0x24, 0x37, 0x18, 0xD9, 0x48, 0x80, 0x5D, 0xFB, 0xA9, 0x51, 0x55, 0x74, 0x2D, 0xBE, 0xD4, 0xDD, 0x19, 0x12, } },
      { "sys",     { 0x10, 0x92, 0xCD, 0x0E, 0x3E, 0xF8, 0xCA, 0x75, 0x3E, 0x94, 0x0E, 0x19, 0xDB, 0xD5, 0xC6, 0x96, 0xF6, 0xFA, 0x0B, 0xDC, 0xC3, 0x39, 0x83, 0x84, 0x55, 0x56, 0xCD, 0xD8, 0xBA, 0x2E, 0x2C, 0x7C, },
                   { 0xA3, 0xE5, 0xD9, 0xD4, 0x5F, 0x96, 0xC8, 0xF0, 0xD8, 0xFF, 0x74, 0x50, 0xC8, 0x68, 0xD7, 0xD3, 0xEB, 0x47, 0x54, 0xB7, 0x26, 0xAF, 0x2A, 0x1F, 0x52, 0xC6, 0xDC, 0x49, 0x26, 0xDF, 0x63, 0x7C, } },
      { "voice",   { 0xEB, 0x1D, 0x31, 0x05, 0x53, 0x4D, 0xE8, 0xB6, 0x1B, 0xA1, 0xE4, 0xD3, 0xBD, 0xB1, 0x5E, 0xA6, 0x09, 0x36, 0x4B, 0x2A, 0x67, 0xDC, 0x05, 0x1C, 0xD5, 0x38, 0x54, 0x22, 0x24, 0x1E, 0x8D, 0xA8, },
                   { 0xDC, 0xE0, 0x9E, 0xB3, 0x42, 0x6C, 0xCE, 0x18, 0xA1, 0x19, 0xC3, 0xD2, 0x75, 0x8B, 0xEC, 0xAB, 0x23, 0xC9, 0x56, 0x3C, 0xC7, 0x1A, 0x7A, 0xC1, 0xAF, 0x4E, 0xCE, 0xCA, 0xF6, 0x54, 0xCB, 0x86, } }, },
    { "2bPP5ddJ", "siReCkHK", "bWxazv2V", "QM37H3Cz" }, },

  { "天使の日曜日 “ef - a fairy tale of the two.” Pleasurable Box.",
    1,
    { { "bg",      { 0xD4, 0xB4, 0xEA, 0xB8, 0xB8, 0x3E, 0x2E, 0xA2, 0xD4, 0xBF, 0xD4, 0xF9, 0x75, 0x12, 0x02, 0xC9, 0x07, 0xDF, 0xD3, 0x90, 0x1B, 0x4E, 0xB2, 0x89, 0x21, 0x9F, 0x39, 0x34, 0xCE, 0xBB, 0x30, 0xF6, },
                   { 0x9B, 0x99, 0x52, 0x4A, 0xC4, 0xAA, 0xB8, 0x69, 0x92, 0xA9, 0x5D, 0xA9, 0x54, 0x45, 0x47, 0xFF, 0xC4, 0x54, 0x83, 0x00, 0xF4, 0xBD, 0xC2, 0x80, 0x0F, 0x9F, 0x54, 0xB5, 0xE1, 0xC5, 0x08, 0xE2, } },
      { "bgm",     { 0xEA, 0xA9, 0xE3, 0x2C, 0xB3, 0x9F, 0x97, 0x74, 0x11, 0xA6, 0x6D, 0x0F, 0xF0, 0x2A, 0xAF, 0x73, 0x44, 0x62, 0xD7, 0x62, 0x52, 0xF2, 0x5E, 0xFA, 0x0B, 0x6B, 0x93, 0x34, 0xDE, 0xEA, 0x84, 0x18, },
                   { 0x5F, 0x8B, 0x18, 0x5C, 0xDF, 0x2E, 0x98, 0x47, 0x9F, 0xEA, 0xC6, 0xDF, 0x2D, 0xE9, 0x01, 0x48, 0x6A, 0xAF, 0x05, 0x45, 0x3E, 0x6D, 0xF6, 0x08, 0x59, 0x05, 0x17, 0x13, 0xE9, 0x21, 0xEE, 0x9D, } },
      { "mov",     { 0xD3, 0x35, 0xC5, 0x58, 0x6E, 0xC1, 0xA0, 0x7A, 0x33, 0x1E, 0x4B, 0xDB, 0x50, 0x7E, 0x5B, 0xB8, 0xD1, 0x20, 0x4C, 0xA2, 0xBD, 0x49, 0xD6, 0xF8, 0xBD, 0x9E, 0x64, 0x78, 0x3F, 0xFC, 0xFC, 0x5B, },
                   { 0 } },
      { "scr",     { 0x45, 0x29, 0x38, 0xA4, 0xFD, 0xAD, 0xB3, 0x7F, 0xCD, 0x72, 0x5C, 0xD5, 0xA0, 0xAF, 0xA3, 0xFF, 0xD9, 0xC8, 0xE3, 0x3B, 0x67, 0x56, 0xBC, 0x0D, 0x41, 0x1A, 0x5E, 0xFC, 0xC8, 0x0C, 0x51, 0x30, },
                   { 0x0B, 0x66, 0xBD, 0x4E, 0xB2, 0x5A, 0x3E, 0x25, 0xAF, 0x4D, 0x42, 0x44, 0xF7, 0xC4, 0xEE, 0x32, 0xA3, 0x7A, 0x53, 0xBA, 0x7F, 0x85, 0x60, 0x02, 0xD4, 0xE3, 0x70, 0xF3, 0xAD, 0x6E, 0x89, 0xE4, } },
      { "se",      { 0xCA, 0xA2, 0xCE, 0x2B, 0xB1, 0x58, 0xF9, 0x75, 0x10, 0x46, 0xE6, 0xD9, 0x41, 0x76, 0x06, 0x0A, 0xAE, 0x64, 0x75, 0x80, 0x6F, 0x6A, 0x22, 0x8D, 0x76, 0xBF, 0x0C, 0xB6, 0x0E, 0x6C, 0xF5, 0x5A, },
                   { 0x39, 0xC2, 0x45, 0xE7, 0x95, 0xA0, 0x38, 0x22, 0x15, 0xFE, 0x8D, 0xF2, 0x5E, 0xDD, 0xFD, 0x23, 0x64, 0x5B, 0xB9, 0x68, 0x1B, 0xE9, 0xCE, 0xD3, 0xCD, 0x9A, 0x54, 0xDD, 0x9E, 0x94, 0x8A, 0xDD, } },
      { "st",      { 0xF7, 0xF0, 0x84, 0xE6, 0xB5, 0x5C, 0x2A, 0x63, 0x92, 0x82, 0x73, 0x30, 0xE1, 0x81, 0x46, 0x59, 0xD9, 0x69, 0x30, 0x7D, 0x85, 0x5F, 0x16, 0x71, 0x1C, 0x10, 0xD0, 0x29, 0x4C, 0x0A, 0x75, 0x5A, },
                   { 0x7C, 0xDE, 0x8A, 0x56, 0x9C, 0x6B, 0x9F, 0xFF, 0xD6, 0xE6, 0xE7, 0x98, 0xC0, 0x94, 0xC7, 0xD8, 0xE5, 0xFC, 0x26, 0xFF, 0xD0, 0x92, 0x52, 0xF1, 0x34, 0x89, 0x99, 0xDF, 0x2D, 0x80, 0xAB, 0x22, } },
      { "sys",     { 0x77, 0x62, 0x53, 0x12, 0x87, 0xE8, 0x18, 0x2E, 0xD1, 0x6F, 0x80, 0x03, 0x1B, 0x3A, 0xDF, 0xA7, 0xAF, 0x62, 0x62, 0xEF, 0xB0, 0x37, 0x74, 0xB2, 0xC6, 0x12, 0xFC, 0xD8, 0xCE, 0xC8, 0xEB, 0x08, },
                   { 0xCF, 0x34, 0xC7, 0x41, 0xD9, 0xD9, 0x5A, 0x0B, 0x9C, 0x0D, 0x2F, 0xBC, 0x9A, 0x2D, 0xBF, 0x80, 0x07, 0xD7, 0x2D, 0x10, 0x05, 0x75, 0x50, 0x0C, 0xAE, 0x09, 0xFD, 0xD1, 0x69, 0x30, 0x68, 0xE0, } },
      { "voice",   { 0x58, 0x6B, 0x16, 0x09, 0xC2, 0x6D, 0x48, 0x33, 0xD3, 0x78, 0xB5, 0xE8, 0x4D, 0xD0, 0xC7, 0x39, 0xA1, 0x28, 0xBF, 0x77, 0x9F, 0x9A, 0x2C, 0x37, 0xBB, 0xE5, 0xB3, 0x6D, 0xBC, 0x4A, 0x85, 0x4E, },
                   { 0xA8, 0x09, 0xFA, 0xB9, 0xDD, 0xBD, 0xD5, 0x9B, 0xDA, 0x50, 0x50, 0xFF, 0xFF, 0x60, 0xE1, 0xF7, 0xD1, 0xF4, 0xFA, 0xA6, 0x2B, 0x24, 0xF4, 0x85, 0x19, 0x83, 0x2E, 0x70, 0xAE, 0xB2, 0xAF, 0xAD, } }, },
      { "umTkCwX7", "G4YS36o7", "31t2Edk4", "97Hy2gfd" }, },

  { "すぴぱら STORY ＃01 - Spring Has Come！",
    2,
    { { "bg",      { 0x3E, 0xEE, 0xE8, 0xE9, 0x0D, 0x94, 0xAA, 0xB6, 0xAA, 0x16, 0x27, 0x83, 0x10, 0x7F, 0x61, 0x79, 0x05, 0xAC, 0x8F, 0x8A, 0x9A, 0xEF, 0xC3, 0x8C, 0x05, 0xB6, 0xA7, 0xA1, 0xD6, 0x4A, 0x21, 0x27, },
                   { 0x44, 0x28, 0x44, 0xCA, 0xF0, 0x46, 0x6C, 0x67, 0x61, 0x33, 0x10, 0xF1, 0x69, 0x90, 0xD9, 0x25, 0x8B, 0xB8, 0xFE, 0x05, 0xE4, 0x1D, 0xFA, 0x12, 0x34, 0xD3, 0xAE, 0xD5, 0xFA, 0xA5, 0xF6, 0x15, } },
      { "bgm",     { 0xE0, 0xE3, 0xA1, 0xA3, 0x38, 0xFA, 0xB6, 0x7C, 0xE0, 0x4B, 0x09, 0xD7, 0x92, 0x19, 0xB1, 0x76, 0x11, 0xCC, 0x9A, 0x6B, 0xC3, 0x06, 0xD1, 0x01, 0xB8, 0xA6, 0x2E, 0xB2, 0x80, 0x2F, 0xD0, 0x69, },
                   { 0xE6, 0x69, 0x78, 0x93, 0xB7, 0x18, 0x50, 0xFC, 0x28, 0xB2, 0x8B, 0x43, 0xA4, 0xB3, 0xDE, 0x78, 0x98, 0x25, 0x78, 0x4D, 0x4F, 0x6A, 0x78, 0x7A, 0x34, 0x41, 0x50, 0xE4, 0x6C, 0x31, 0x7F, 0x73, } },
      { "mov",     { 0x10, 0x2C, 0xCE, 0x3E, 0xB7, 0xB6, 0x69, 0x4B, 0xD1, 0xAD, 0xBE, 0xC6, 0xD6, 0x75, 0x24, 0x5D, 0x64, 0x3A, 0x32, 0xA0, 0xDF, 0x18, 0xA9, 0x22, 0xA9, 0x52, 0x46, 0x8B, 0x24, 0x92, 0x25, 0xBA, },
                   { 0 } },
      { "scr",     { 0x3F, 0x6B, 0xD3, 0x15, 0xE1, 0x16, 0x18, 0x6C, 0x16, 0xC5, 0x20, 0xD9, 0x63, 0x4D, 0x69, 0xA9, 0x66, 0xE9, 0x32, 0x23, 0xD1, 0x03, 0x2D, 0x33, 0x3B, 0x72, 0xD9, 0xCA, 0x01, 0x56, 0x9D, 0xC2, },
                   { 0x67, 0x40, 0x9C, 0x9A, 0x2A, 0x59, 0xAB, 0xC9, 0xFD, 0xD2, 0x77, 0x55, 0xC8, 0x32, 0xED, 0x21, 0x07, 0xA8, 0xF5, 0xB1, 0x5F, 0xC4, 0xFC, 0xF9, 0x0B, 0x70, 0x7B, 0x5F, 0xD0, 0x4B, 0x92, 0xF8, } },
      { "se",      { 0xDE, 0x46, 0x99, 0xD8, 0x0B, 0xF8, 0xEC, 0x58, 0x90, 0xB8, 0x75, 0x2C, 0xA6, 0x8B, 0x6C, 0x94, 0x47, 0x4A, 0xEC, 0xD7, 0x1E, 0xF5, 0xDC, 0x98, 0x9A, 0x67, 0xC6, 0x14, 0x14, 0xD8, 0x46, 0x0A, },
                   { 0x5A, 0xA4, 0x66, 0x6F, 0xAE, 0x80, 0xE8, 0xAF, 0xE7, 0x0C, 0xC0, 0xAA, 0x81, 0xF5, 0x22, 0xE1, 0xC8, 0x61, 0xCE, 0x7E, 0x0B, 0x0A, 0xB2, 0xB0, 0x6E, 0xC6, 0x81, 0x55, 0xF0, 0xE2, 0x08, 0x34, } },
      { "st",      { 0x97, 0x2F, 0x32, 0x65, 0x47, 0x4F, 0xDA, 0x1D, 0x7F, 0x28, 0x96, 0x13, 0x56, 0x90, 0x71, 0x6C, 0x15, 0x78, 0x89, 0x41, 0xDA, 0xE3, 0x32, 0xCC, 0x0B, 0xA1, 0x51, 0xC8, 0x87, 0x12, 0xBE, 0x82, },
                   { 0x39, 0x7F, 0x9C, 0xAE, 0xE0, 0x1F, 0xF6, 0x7A, 0xF7, 0x0B, 0xAC, 0x71, 0x7B, 0xAA, 0x14, 0xD0, 0xCE, 0x0D, 0xA7, 0xBC, 0xAF, 0xC5, 0xCF, 0x3A, 0x92, 0x6B, 0xFA, 0x46, 0x41, 0x86, 0xAA, 0x8D, } },
      { "sys",     { 0xDC, 0x2E, 0xA1, 0xEA, 0x00, 0xFE, 0xA7, 0x3C, 0xCB, 0x10, 0xE8, 0x6D, 0xC5, 0x6F, 0xCE, 0xB0, 0x26, 0xA9, 0xC3, 0x1C, 0xE2, 0x31, 0x5B, 0xFB, 0x5C, 0x8F, 0x6F, 0xD6, 0x97, 0x3B, 0x8E, 0x83, },
                   { 0xE6, 0xAF, 0x03, 0x3F, 0xB4, 0x19, 0x1E, 0xBA, 0x5A, 0x06, 0x70, 0x9E, 0xB7, 0xFD, 0x48, 0x29, 0x17, 0xE0, 0x8D, 0xE6, 0x70, 0xC7, 0xE5, 0xB5, 0xB8, 0x22, 0x24, 0xC2, 0xC8, 0xF3, 0xA7, 0x6F, } },
      { "voice",   { 0x72, 0xEF, 0xDF, 0x54, 0x2E, 0xCD, 0x67, 0x2C, 0xA1, 0xDF, 0xF0, 0x5D, 0x1F, 0x75, 0x3F, 0xA3, 0x3C, 0x3F, 0x27, 0x0A, 0x99, 0xE1, 0x91, 0x9C, 0xC9, 0x9D, 0xFD, 0xF0, 0x86, 0xFA, 0xB3, 0xE8, },
                   { 0x96, 0x3A, 0x96, 0x4F, 0xF9, 0x78, 0x4A, 0x65, 0x7D, 0x86, 0x21, 0x92, 0x9C, 0x15, 0x02, 0xF8, 0x33, 0x99, 0x26, 0xF1, 0xE3, 0x39, 0x96, 0xA7, 0x93, 0x5F, 0xDF, 0xA6, 0x53, 0xFF, 0xA1, 0xA4, } }, },      
      { "36TXHE5N", "oRQCAU1o", "gTcL74ch", "hYPH3Fxw" }, },

  { "夏空のペルセウス",
    2,
    { { "bg",      { 0x4F, 0x0D, 0x68, 0x52, 0x36, 0x34, 0x19, 0xB3, 0x72, 0xA0, 0xF0, 0xC1, 0xE0, 0x1B, 0x17, 0x24, 0x3C, 0x92, 0x77, 0xEB, 0xCD, 0x13, 0xC7, 0xD1, 0x41, 0x4B, 0xEE, 0xFB, 0x56, 0xF8, 0x46, 0xE3, },
                   { 0x18, 0x9C, 0x98, 0x96, 0x72, 0xB1, 0x6C, 0x2D, 0xDD, 0x2C, 0x7B, 0xAA, 0x06, 0x38, 0x29, 0xAC, 0x94, 0xF6, 0x76, 0x64, 0x14, 0x1F, 0x68, 0x71, 0xD4, 0xD3, 0xA2, 0xE9, 0x7E, 0x5B, 0x9C, 0x90, } },
      { "bgm",     { 0xCB, 0x6A, 0x13, 0x4C, 0x17, 0xD8, 0x1A, 0xD7, 0x0C, 0xA9, 0x8A, 0x40, 0xAB, 0x12, 0x54, 0xB9, 0x0E, 0xED, 0x39, 0xD3, 0x57, 0xE1, 0x4C, 0xD4, 0xB3, 0xC2, 0x9A, 0x2D, 0x6B, 0x0C, 0x42, 0x8B, },
                   { 0xAA, 0x8D, 0x55, 0xE5, 0x84, 0x80, 0x0E, 0xD7, 0x65, 0x22, 0xD4, 0xF9, 0xC6, 0x39, 0x3D, 0xCC, 0x88, 0x56, 0x2F, 0xAD, 0x77, 0xC1, 0x20, 0x7D, 0x77, 0x4D, 0x91, 0xC3, 0xBF, 0x77, 0x44, 0x07, } },
      { "mov",     { 0x42, 0x95, 0x24, 0x67, 0xFB, 0x29, 0x2C, 0x34, 0x39, 0xA6, 0x41, 0x5B, 0xD1, 0x42, 0x3C, 0xAD, 0x0B, 0x8D, 0x0D, 0xFA, 0xDA, 0xC5, 0xEB, 0x07, 0x85, 0xD6, 0xF8, 0xAA, 0xC0, 0x1F, 0x06, 0xE5, },
                   { 0 } },
      { "scr",     { 0x2E, 0x49, 0x2A, 0xCD, 0x2E, 0xDD, 0xBA, 0xBE, 0xDD, 0x03, 0xFF, 0x9A, 0x30, 0x89, 0xB9, 0x22, 0x1E, 0x6A, 0x11, 0x2C, 0xFA, 0xE8, 0xFC, 0x4C, 0xEC, 0x65, 0xCE, 0x38, 0x7B, 0x0F, 0x24, 0x65, },
                   { 0x55, 0x1A, 0x63, 0xB5, 0x2C, 0x18, 0xCF, 0xFA, 0xB7, 0x3B, 0xFB, 0xF1, 0x33, 0xD1, 0x78, 0xAB, 0x53, 0xAD, 0x42, 0x96, 0x54, 0x07, 0x1D, 0x00, 0xF6, 0x15, 0xD6, 0x0B, 0x9C, 0xAD, 0x41, 0x57, } },
      { "se",      { 0x58, 0x27, 0x55, 0x8A, 0x78, 0x6D, 0xC6, 0x04, 0xC2, 0x9E, 0xDA, 0x3F, 0x1D, 0x04, 0x4E, 0xFE, 0x60, 0x53, 0xCF, 0x59, 0xDC, 0x1A, 0xB8, 0x02, 0x6F, 0xDA, 0x51, 0xED, 0x13, 0x5E, 0x33, 0x97, },
                   { 0x85, 0x52, 0xD1, 0x7A, 0xAD, 0x3F, 0x5E, 0x35, 0x6F, 0x06, 0xD8, 0xDF, 0x60, 0x3A, 0xFD, 0xF8, 0xFB, 0x85, 0xFD, 0x92, 0x45, 0xE8, 0x47, 0xF9, 0x7E, 0x73, 0xF7, 0xB4, 0x5C, 0xFA, 0xFA, 0x89, } },
      { "st",      { 0xF0, 0x76, 0xB5, 0x5B, 0x34, 0x60, 0xEB, 0x8A, 0x50, 0xF7, 0x8B, 0xF3, 0x8D, 0xCF, 0x62, 0xA5, 0x14, 0x23, 0x64, 0xB6, 0x46, 0xCE, 0x28, 0x4B, 0xB4, 0xBE, 0xF0, 0xCA, 0xEB, 0x83, 0xE6, 0x71, },
                   { 0x71, 0xF7, 0x3A, 0x97, 0x67, 0x18, 0xFF, 0x68, 0x1B, 0x49, 0x33, 0x4B, 0xDC, 0x39, 0xF5, 0xD0, 0x8E, 0x27, 0x5B, 0xE8, 0x65, 0xDA, 0x04, 0xFD, 0x6D, 0xC9, 0x48, 0x4D, 0xDE, 0xE9, 0x14, 0x39, } },
      { "sys",     { 0x5F, 0xF6, 0x66, 0x10, 0x80, 0x3C, 0xC3, 0x75, 0xED, 0x46, 0x88, 0xA7, 0xCC, 0x6E, 0xB4, 0xF9, 0x0B, 0x84, 0x4A, 0x55, 0x9F, 0x6B, 0xBF, 0x0A, 0x7F, 0x5C, 0x83, 0xB0, 0xBB, 0x04, 0xB2, 0xBD, },
                   { 0xDE, 0x73, 0x64, 0xE8, 0x91, 0xB4, 0xB7, 0x39, 0xC6, 0xCC, 0xEE, 0xA1, 0x93, 0x7F, 0x13, 0x92, 0x8B, 0x0F, 0x39, 0x1B, 0xBF, 0x37, 0xB2, 0x3C, 0xAC, 0x43, 0x5D, 0x4E, 0x8F, 0x68, 0x68, 0x84, } },
      { "voice",   { 0xB7, 0x9E, 0xC0, 0x39, 0xD9, 0x8C, 0x0C, 0x96, 0xEB, 0x2B, 0x94, 0xE9, 0x16, 0x0A, 0x43, 0xED, 0x09, 0xD1, 0x27, 0x3E, 0xA9, 0xD4, 0xDE, 0xE6, 0x06, 0x58, 0x59, 0x6B, 0x5B, 0x84, 0x76, 0x04, },
                   { 0x31, 0x1D, 0x9D, 0x71, 0x7B, 0xD4, 0x20, 0x54, 0x82, 0xB0, 0xB6, 0x51, 0x91, 0x73, 0x9F, 0x8A, 0xF8, 0xFC, 0x16, 0x7C, 0x8E, 0x0C, 0xD6, 0xBB, 0x83, 0xCE, 0x8E, 0xC6, 0x4C, 0xF9, 0x92, 0x05, } }, },
      { "Tm5t3byk", "WX7axuR2", "mytwR2ed", "C4UX2f8T" }, },
};

unsigned long GAME_COUNT = sizeof(GAME_INFO) / sizeof(GAME_INFO[0]);

struct PAZHDR {
  unsigned char unknown[32];
  unsigned long toc_len;
};

struct PAZHDR2 {
  unsigned long entry_count;
};

struct PAZENTRY {
  unsigned long offset;
  unsigned long unknown1;
  unsigned long original_length;
  unsigned long length;
  unsigned long padded_length;
  unsigned long compressed;
};

void unobfuscate3(const string&  filename, 
                  unsigned char* buff, 
                  unsigned long  len, 
                  unsigned long  version)
{
  char scramble[256] = { 0 };

  for (unsigned long i = 0; i < 256; i++) {
    scramble[i] = (unsigned char) i;
  }

  size_t        filename_len = filename.length();
  unsigned long index   = 0;

  for (unsigned long i = 0; i < 256; i++) {
    index = (unsigned char) (index + scramble[i] + filename[i % filename_len]);

    std::swap(scramble[i], scramble[index]);
  }

  unsigned long index1 = 0;
  unsigned long index2 = 0;

  if (version >= 2) {
    CryptoPP::CRC32 crc;
    unsigned char   digest[CryptoPP::CRC32::DIGESTSIZE];
    crc.CalculateDigest(digest, (unsigned char*)filename.c_str(), filename.length());
    
    unsigned long skip = (*(unsigned long*)digest >> 12) & 0xFF; 

    for (unsigned long i = 0; i < skip; i++) {
      index1 = (unsigned char) (index1 + 1);
      index2 = (unsigned char) (index2 + scramble[index1]);
      std::swap(scramble[index1], scramble[index2]);
    }
  }

  for (unsigned long i = 0; i < len; i++) {
    index1 = (unsigned char) (index1 + 1);
    index2 = (unsigned char) (index2 + scramble[index1]);
    std::swap(scramble[index1], scramble[index2]);

    buff[i] ^= scramble[(unsigned char)(scramble[index1] + scramble[index2])];
  }
}

void write_obfuscate(int fd, unsigned char key, void* buff, unsigned long len) {
  unsigned char* out_buff = new unsigned char[len];

  unsigned char* out_p   = (unsigned char*) out_buff;
  unsigned char* out_end = out_p + len;
  unsigned char* p       = (unsigned char*) buff;

  while (out_p < out_end) {
    *out_p++ = *p++ ^ key;
  }
  
  write(fd, out_buff, len);

  delete [] out_buff;
}

void read_unobfuscate(int fd, unsigned char key, void* buff, unsigned long len) {
  read(fd, buff, len);

  unsigned char* p   = (unsigned char*) buff;
  unsigned char* end = p + len;

  while (p < end) {
    *p++ ^= key;
  }
}

typedef std::list<int> fds_t;
int lseek_multi(const fds_t& fds, unsigned long offset) {
  unsigned long real_offset = offset;

  for (fds_t::const_iterator i = fds.begin();
       i != fds.end();
       ++i)
  {
    unsigned long file_len = as::get_file_size(*i);

    if (real_offset < file_len) {
      lseek(*i, real_offset, SEEK_SET);
      return *i;
    } else {
      real_offset -= file_len;
    }
  }

  fprintf(stderr, "error: offset %lu outside of available archives\n", offset);
  exit(1);

  return -1;
}

void decrypt_mov(unsigned char* seed,
                 const string&  seed2,
                 unsigned char* buff,
                 unsigned long  len)
{
  unsigned char rc4_key[256];

  for (unsigned long i = 0; i < 256; i++) {
    rc4_key[i] = seed[i] ^ seed2[i % seed2.length()];
  }

  unsigned long  key_len = 0x10000;
  unsigned char* key     = new unsigned char[key_len];
  CryptoPP::Weak::ARC4 rc4(rc4_key, sizeof(rc4_key));     
  rc4.GenerateBlock(key, key_len);

  for (unsigned long i = 0; i < len; i++) {
    buff[i] ^= key[i % key_len];
  }

  delete [] key;
}

int main(int argc, char** argv) {
  if (argc < 3) {
    fprintf(stderr, "exef2paz v1.22r4 by asmodean＆改造8pvc09vr11\n\n");
    fprintf(stderr, "usage: %s <input.paz> <game index> [output.paz]\n\n", argv[0]);    
    
    for (unsigned long i = 0; i < GAME_COUNT; i++) {
      fprintf(stderr, "\tgame index = %d -> %s\n", i, GAME_INFO[i].name.c_str());
    }

    return -1;
  }

  string        in_filename(argv[1]);
  unsigned long game_index = atol(argv[2]);
  string        out_filename;

  if (argc > 3) out_filename = argv[3];
  bool do_rebuild = !out_filename.empty();

  if (game_index >= GAME_COUNT) {
    fprintf(stderr, "Unknown game index: %d\n", game_index);
    return -1;
  }

  string prefix(as::stringtol(as::get_file_prefix(in_filename, true)));

  game_info_t game_info = GAME_INFO[game_index];
  key_info_t  keys;

  for (unsigned long i = 0; !game_info.keys[i].prefix.empty(); i++) {
    if (prefix == game_info.keys[i].prefix) {
      keys = game_info.keys[i];
    }
  }

  if (keys.prefix.empty()) {
    fprintf(stderr, "%s: don't know encryption key.\n", in_filename.c_str());
    return -1;
  }

  // Hard to recognize individual sound files because they lack extension
  bool is_audio = prefix == "bgm" || prefix == "se" || prefix == "voice" || prefix == "PMvoice";
  bool is_mov   = prefix == "mov";

  int fd = as::open_or_die(in_filename, O_RDONLY | O_BINARY);  

  fds_t fds;
  fds.push_back(fd);

  for (unsigned long i = 0; true; i++) {
    string split_filename = in_filename + as::stringf("%c", 'A' + i);

    if (as::is_file_readable(split_filename)) {
      fds.push_back(as::open_or_die(split_filename, O_RDONLY | O_BINARY));
    } else {
      break;
    }
  }

  PAZHDR hdr;
  read(fd, &hdr, sizeof(hdr));  

  char simple_key = hdr.toc_len >> 24;

  lseek(fd, 0, SEEK_SET);
  read_unobfuscate(fd, simple_key, &hdr, sizeof(hdr));  

  Blowfish bf;  

  unsigned char* toc_buff = new unsigned char[hdr.toc_len];
  read_unobfuscate(fd, simple_key, toc_buff, hdr.toc_len);
  bf.Set_Key(keys.toc_key, sizeof(keys.toc_key));
  bf.Decrypt(toc_buff, hdr.toc_len);  

  int out_fd = -1;

  if (do_rebuild) {
    out_fd = as::open_or_die(out_filename, 
                             O_CREAT | O_TRUNC | O_WRONLY | O_BINARY,
                             S_IREAD | S_IWRITE);

    write_obfuscate(out_fd, simple_key, &hdr, sizeof(hdr));
    write_obfuscate(out_fd, simple_key, toc_buff, hdr.toc_len);
  }

  PAZHDR2*       hdr2 = (PAZHDR2*) toc_buff;
  unsigned char* p    = (unsigned char*) (hdr2 + 1);

  unsigned char* mov_seed = NULL;

  if (is_mov) {
    mov_seed = p;
    p += 256;
  }

  unsigned long file_offset = 0;

  for (unsigned long i = 0; i < hdr2->entry_count; i++) {
    string filename = (char*) p;
    p += filename.length() + 1;

    PAZENTRY* entry = (PAZENTRY*) p;
    p += sizeof(*entry); 

    unsigned long  len  = 0;
    unsigned char* buff = NULL;

    if (do_rebuild){
      int new_fd = as::open_or_die(filename, O_RDONLY | O_BINARY);

      entry->offset = tell(out_fd);

      if (entry->compressed) {
        unsigned long  temp_len  = as::get_file_size(new_fd);
        unsigned char* temp_buff = new unsigned char[temp_len];
        read(new_fd, temp_buff, temp_len);

        CryptoPP::ZlibCompressor comp;
        comp.Put(temp_buff, temp_len);
        comp.MessageEnd();

        entry->original_length = temp_len;
        entry->length          = (unsigned long) comp.MaxRetrievable();
        entry->padded_length   = (entry->length + 7) & ~7;

        len  = entry->padded_length;
        buff = new unsigned char[len];
        memset(buff, 0, len);
        comp.Get(buff, entry->length);

        delete [] temp_buff;
      } else {
        entry->original_length = entry->length;
        entry->length          = as::get_file_size(new_fd);
        entry->padded_length   = (entry->length + 7) & ~7;

        len  = entry->padded_length;
        buff = new unsigned char[len];
        memset(buff, 0, len);

        read(new_fd, buff, entry->length);
      }

      close(new_fd);
    } else {
      len  = entry->padded_length;
      buff = new unsigned char[len];
      read_unobfuscate(lseek_multi(fds, entry->offset), simple_key, buff, len);
    }

    string crud;

    if (filename.find(".png") != string::npos) {
      crud = game_info.crud.png;
    } else if (filename.find(".ogg") != string::npos || is_audio) {
      crud = game_info.crud.ogg;
    } else if (filename.find(".sc") != string::npos) {
      crud = game_info.crud.sc;
    } else if (filename.find(".avi") != string::npos || filename.find(".mpg") != string::npos) {
      crud = game_info.crud.avi;
    }

    if (entry->compressed) {
      crud = "";
    }

    string seed = as::stringtol(filename) + as::stringf(" %08X ", entry->length) + crud;

    if (is_mov) {
      decrypt_mov(mov_seed, seed, buff, len);
    } else {
      bf.Set_Key(keys.dat_key, sizeof(keys.dat_key));

      if (do_rebuild) {
        if (!crud.empty()) unobfuscate3(seed, buff, len, game_info.version);
        bf.Encrypt(buff, len);
      } else {
        bf.Decrypt(buff, len);
        if (!crud.empty()) unobfuscate3(seed, buff, len, game_info.version);
      }
    }

    if (do_rebuild) {
      write_obfuscate(out_fd, simple_key, buff, len);
    } else {
      if (entry->compressed) {
        unsigned long  temp_len  = entry->original_length;
        unsigned char* temp_buff = new unsigned char[temp_len];

        CryptoPP::ZlibDecompressor decomp;
        decomp.Put(buff, len);
        decomp.MessageEnd();
        decomp.Get(temp_buff, temp_len);

        delete [] buff;

        buff = temp_buff;
        len  = temp_len;
      } else {        
        len = entry->length;
      }

      as::make_path(filename);
      as::write_file(filename, buff, len);
    }

    delete [] buff;
  }

  if (do_rebuild) {
    bf.Set_Key(keys.toc_key, sizeof(keys.toc_key));
    bf.Encrypt(toc_buff, hdr.toc_len);  

    lseek(out_fd, 0, SEEK_SET);
    write_obfuscate(out_fd, simple_key, &hdr, sizeof(hdr));
    write_obfuscate(out_fd, simple_key, toc_buff, hdr.toc_len);
    close(out_fd);
  }

  delete [] toc_buff;

  close(fd);

  return 0;
}
