// exmornpak.cpp, v1.0 2007/07/15
// coded by asmodean

// contact: 
//   web:   http://plaza.rakuten.co.jp/asmodean
//   email: asmodean [at] hush.com
//   irc:   asmodean on efnet (irc.efnet.net)

// This tool extracts Morning's *.pak archives.

#include <io.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <direct.h>
#include <cerrno>
#include <cstdio>
#include <string>

using std::string;

struct PAKHDR {
  unsigned long signature;
  unsigned long toc_blocks;
};

struct PAKBLOCKHDR {
  unsigned long entry_count;
};

struct PAKBLOCKENTRY {
  unsigned long filename_offset;
  unsigned long offset;
  unsigned long length;
};

static const unsigned long TOC_BLOCK_LEN = 512;

unsigned char KEY_DATA[TOC_BLOCK_LEN] = {
    0x80, 0x67, 0xCF, 0x4C, 0x2D, 0x38, 0x57, 0xFE, 0x35, 0x1A, 0x89, 0x31, 
    0xF1, 0x26, 0xF3, 0x35, 0xE1, 0x48, 0x10, 0xF2, 0x62, 0xFE, 0xBC, 0x11, 
    0xCD, 0xED, 0x23, 0xD7, 0x6B, 0x15, 0x87, 0x8D, 0x71, 0xAA, 0x24, 0x41, 
    0xF5, 0x98, 0xB4, 0xEC, 0xAE, 0x1B, 0xC1, 0xEA, 0xF0, 0x50, 0xA4, 0x4A, 
    0xF2, 0xBC, 0x38, 0x58, 0xA3, 0x8D, 0xEB, 0x8E, 0xEE, 0xF1, 0xF3, 0x9C, 
    0xC0, 0x95, 0x44, 0xA2, 0xC6, 0x1B, 0xA5, 0x7A, 0xEC, 0x83, 0xC4, 0xA0, 
    0xCE, 0x13, 0x8A, 0x50, 0xE0, 0xFB, 0x3D, 0xF4, 0x7B, 0x01, 0x1D, 0xF1, 
    0x98, 0xC4, 0x03, 0x77, 0x43, 0xD2, 0x23, 0xB8, 0xF5, 0xD7, 0xF3, 0x11, 
    0x7F, 0xE8, 0xA6, 0x48, 0xD2, 0x00, 0xB4, 0x35, 0x84, 0x72, 0xFE, 0xA8, 
    0x71, 0x72, 0xED, 0x5F, 0x74, 0xF1, 0x9C, 0x0B, 0x70, 0xFC, 0x92, 0xBD, 
    0x5F, 0xBF, 0x0F, 0xE1, 0x4F, 0x97, 0xAE, 0x8E, 0xEA, 0xB3, 0xA7, 0xB7, 
    0xB9, 0x52, 0xDA, 0x4B, 0xE1, 0x18, 0x60, 0x9E, 0x4B, 0x35, 0x76, 0x2F, 
    0xD4, 0x7E, 0x9C, 0xAB, 0xCB, 0x92, 0x2D, 0x90, 0xDA, 0x0C, 0x2E, 0xA7, 
    0xFC, 0x0F, 0xE3, 0xA1, 0xBA, 0xF2, 0xB7, 0xDF, 0xEB, 0xE7, 0x8E, 0x34, 
    0x04, 0x19, 0x1D, 0x22, 0xD4, 0x7D, 0x4F, 0x2A, 0xD1, 0xF8, 0xF1, 0x7F, 
    0xF9, 0xF5, 0xAE, 0x1D, 0xB6, 0x9B, 0xD1, 0x95, 0x9E, 0x5C, 0x5A, 0xDB, 
    0xAF, 0x1B, 0xAC, 0xA9, 0x5B, 0x1A, 0x51, 0x65, 0x58, 0xA3, 0x62, 0x8E, 
    0x4E, 0xAC, 0x2B, 0x9E, 0xBB, 0x5B, 0x91, 0xC6, 0xB5, 0x0F, 0x2D, 0x94, 
    0xD5, 0x0F, 0xAA, 0x53, 0x5E, 0x5C, 0xBF, 0x4F, 0xFC, 0xEE, 0x33, 0x98, 
    0x20, 0xF1, 0x42, 0x9B, 0xA6, 0xDF, 0x8A, 0x01, 0x3C, 0xB7, 0xB9, 0x24, 
    0x8D, 0x35, 0x11, 0x04, 0x1A, 0x61, 0x85, 0x80, 0x1A, 0x75, 0x15, 0xCA, 
    0xF7, 0x05, 0x54, 0x1F, 0x6B, 0x18, 0xA6, 0x0E, 0x33, 0x9B, 0xF6, 0x2E, 
    0xAB, 0x12, 0xFD, 0x11, 0x28, 0xE6, 0x07, 0xFC, 0xD6, 0x17, 0xDE, 0x5D, 
    0x4A, 0x71, 0xD2, 0xE3, 0xDF, 0x3D, 0x6D, 0x0E, 0xA5, 0x59, 0xD9, 0xE2, 
    0x9C, 0x04, 0x38, 0xBE, 0x80, 0x96, 0xB8, 0x87, 0x57, 0x3E, 0xE9, 0x77, 
    0x75, 0x69, 0xE1, 0x19, 0x59, 0x71, 0x08, 0xA5, 0x38, 0xA5, 0xDC, 0xEF, 
    0x23, 0x2B, 0x61, 0x9D, 0x5B, 0xBE, 0x95, 0xB7, 0xB6, 0xD7, 0x1F, 0x87, 
    0x21, 0x06, 0xB1, 0x19, 0xFA, 0x7E, 0x53, 0xE5, 0x70, 0x4C, 0x82, 0x5B, 
    0x56, 0x59, 0x70, 0xFF, 0x28, 0x72, 0x7F, 0x88, 0x9B, 0x00, 0xAF, 0x6B, 
    0xE5, 0xBC, 0x0E, 0xC0, 0x24, 0x1C, 0x41, 0x59, 0x81, 0xB6, 0x58, 0xDD, 
    0x3F, 0xD5, 0xE9, 0xFC, 0x06, 0x0D, 0x3A, 0x9E, 0xFD, 0xB8, 0x95, 0x9A, 
    0xC3, 0xF3, 0x64, 0xB5, 0x4C, 0xCE, 0x61, 0x2E, 0x1C, 0x5F, 0xE8, 0x87, 
    0x6A, 0xBD, 0xF9, 0x90, 0x5F, 0x26, 0x26, 0x40, 0xC6, 0x09, 0x34, 0xC4, 
    0x96, 0xEF, 0xE1, 0xFF, 0xE9, 0x44, 0x55, 0x00, 0x50, 0x7D, 0xE3, 0x2F, 
    0x86, 0xC1, 0x5C, 0xB8, 0x32, 0xD9, 0xCB, 0xDA, 0x6C, 0xDC, 0x0F, 0xCB, 
    0x31, 0xC8, 0x15, 0xF3, 0xDE, 0x7E, 0x32, 0x84, 0x45, 0x5A, 0x9C, 0xE7, 
    0x60, 0xB6, 0x7B, 0x69, 0x2A, 0x58, 0x94, 0xFB, 0xC3, 0xCA, 0x34, 0x6E, 
    0x6B, 0x4A, 0xE1, 0x5E, 0x50, 0x32, 0xD9, 0xBE, 0x21, 0xF9, 0x4C, 0x42, 
    0xF8, 0x54, 0x61, 0x2B, 0x78, 0x84, 0x60, 0x13, 0x40, 0xE3, 0xF9, 0x31, 
    0x5B, 0xFB, 0xC0, 0xF1, 0x6D, 0x04, 0xF7, 0x99, 0x52, 0x3E, 0xDE, 0x1E, 
    0x4F, 0x32, 0x6D, 0x0C, 0x42, 0xEF, 0xB4, 0x7D, 0xEA, 0x32, 0x67, 0xD7, 
    0xB0, 0xE0, 0x9D, 0x8D, 0xE8, 0x04, 0x56, 0x5B, 0x3D, 0x3E, 0xEB, 0x34, 
    0xED, 0x13, 0x48, 0x0F, 0x73, 0x83, 0xFF, 0x97, 
};

void unobfuscate(unsigned char* buff, unsigned long len) { 
  for (unsigned long i = 0; i < sizeof(KEY_DATA) && i < len; i++) {
    buff[i] ^= KEY_DATA[i];
  }
}

int open_or_die(const string& filename, int flags, int mode = 0) {
  int fd = open(filename.c_str(), flags, mode);

  if (fd == -1) {
    fprintf(stderr, "Could not open %s (%s)\n", filename.c_str(), strerror(errno));
    exit(-1);
  }

  return fd;
}

void make_path(const string& filename) {
  char temp[4096] = { 0 };
  strcpy(temp, filename.c_str());

  for (unsigned long i = 0; i < filename.length(); i++) {
    if (temp[i] == '\\' || temp[i] == '/') {
      char t  = temp[i];
      temp[i] = '\0';
      mkdir(temp);
      temp[i] = t;
    }
  }
}

int main(int argc, char** argv) {
  if (argc != 2) {
    fprintf(stderr, "exmornpak v1.0 by asmodean\n\n");
    fprintf(stderr, "usage: %s <input.pak>\n", argv[0]);
    return -1;
  }

  string in_filename(argv[1]);  

  int fd = open_or_die(in_filename, O_RDONLY | O_BINARY);

  PAKHDR hdr;
  read(fd, &hdr, sizeof(hdr));

  unsigned long  toc_len  = hdr.toc_blocks * TOC_BLOCK_LEN;
  unsigned char* toc_buff = new unsigned char[toc_len];
  read(fd, toc_buff, toc_len);

  for (unsigned long i = 0; i < hdr.toc_blocks; i++) {
    unsigned char* block = toc_buff + i * TOC_BLOCK_LEN;
    unobfuscate(block, TOC_BLOCK_LEN);

    PAKBLOCKHDR*   blockhdr = (PAKBLOCKHDR*) block;
    PAKBLOCKENTRY* entries  = (PAKBLOCKENTRY*) (blockhdr + 1);    

    for (unsigned long j = 0; j < blockhdr->entry_count; j++) {
      char* filename = (char*) block + entries[j].filename_offset;

      unsigned long  len  = entries[j].length;
      unsigned char* buff = new unsigned char[len];
      lseek(fd, entries[j].offset, SEEK_SET);
      read(fd, buff, len);

      make_path(filename);

      int out_fd = open_or_die(filename,
                               O_CREAT | O_WRONLY | O_TRUNC | O_BINARY, 
                               S_IREAD | S_IWRITE);

      if (!memcmp(buff, "\x00\x00\x00\x0D\x49\x48\x44\x52", 8)) {
        write(out_fd, "\x89\x50\x4E\x47\x0D\x0A\x1A\x0A", 8);
      }

      write(out_fd, buff, len);
      close(out_fd);

      delete [] buff;
    }
  }

  delete [] toc_buff;

  close(fd);

  return 0;
}
